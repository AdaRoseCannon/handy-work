{"version":3,"file":"handy-controls.min.js","sources":["../node_modules/three/examples/jsm/libs/motion-controllers.module.js","../src/lib/XRControllerModelFactory.js","../src/handy-controls.js"],"sourcesContent":["/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\nconst Constants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n\n  ButtonTouchThreshold: 0.05,\n\n  AxisTouchThreshold: 0.1,\n\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  // Get the list of profiles\n  const supportedProfilesList = await fetchProfilesList(basePath);\n\n  // Find the relative path to the first requested profile that is recognized\n  let match;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n\n  let assetPath;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(\n        `No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`\n      );\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return { profile, assetPath };\n}\n\n/** @constant {Object} */\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: Constants.ComponentState.DEFAULT\n};\n\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n\n  // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n  const hypotenuse = Math.sqrt((x * x) + (y * y));\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n\n  // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n  const result = {\n    normalizedXAxis: (xAxis * 0.5) + 0.5,\n    normalizedYAxis: (yAxis * 0.5) + 0.5\n  };\n  return result;\n}\n\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === Constants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n\n    // Initializes the response's current value based on default data\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis, yAxis, button, state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case Constants.ComponentProperty.X_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedXAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.Y_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedYAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.BUTTON:\n        this.value = (this.states.includes(state)) ? button : 0;\n        break;\n      case Constants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === Constants.VisualResponseProperty.VISIBILITY) {\n          this.value = (this.states.includes(state));\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId\n     || !componentDescription\n     || !componentDescription.visualResponses\n     || !componentDescription.gamepadIndices\n     || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n\n    // Build all the visual responses for this component\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n\n    // Set default values\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n\n    this.values = {\n      state: Constants.ComponentState.DEFAULT,\n      button: (this.gamepadIndices.button !== undefined) ? 0 : undefined,\n      xAxis: (this.gamepadIndices.xAxis !== undefined) ? 0 : undefined,\n      yAxis: (this.gamepadIndices.yAxis !== undefined) ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = Constants.ComponentState.DEFAULT;\n\n    // Get and normalize button\n    if (this.gamepadIndices.button !== undefined\n        && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = (this.values.button < 0) ? 0 : this.values.button;\n      this.values.button = (this.values.button > 1) ? 1 : this.values.button;\n\n      // Set the state based on the button\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = Constants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > Constants.ButtonTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize x axis value\n    if (this.gamepadIndices.xAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = (this.values.xAxis < -1) ? -1 : this.values.xAxis;\n      this.values.xAxis = (this.values.xAxis > 1) ? 1 : this.values.xAxis;\n\n      // If the state is still default, check if the xAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.xAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize Y axis value\n    if (this.gamepadIndices.yAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = (this.values.yAxis < -1) ? -1 : this.values.yAxis;\n      this.values.yAxis = (this.values.yAxis > 1) ? 1 : this.values.yAxis;\n\n      // If the state is still default, check if the yAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.yAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Update the visual response weights based on the current component data\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\n\n/**\n  * @description Builds a motion controller with components and visual responses based on the\n  * supplied profile description. Data is polled from the xrInputSource's gamepad.\n  * @author Nell Waliczek / https://github.com/NellWaliczek\n*/\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n\n    // Build child components as described in the profile description\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n\n    // Initialize components based on current gamepad state\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\n\nexport { Constants, MotionController, fetchProfile, fetchProfilesList };\n","/* global THREE */\nconst {\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tSphereGeometry,\n} = THREE;\n\nimport {\n\tConstants as MotionControllerConstants,\n\tfetchProfile,\n\tMotionController\n} from 'three/examples/jsm/libs/motion-controllers.module.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t}\n\n\tsetEnvironmentMap( envMap ) {\n\n\t\tif ( this.envMap == envMap ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.envMap = envMap;\n\t\tthis.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = this.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Polls data from the XRInputSource and updates the model's components to match\n\t * the real world data\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( ! this.motionController ) return;\n\n\t\t// Cause the MotionController to poll the Gamepad for data\n\t\tthis.motionController.updateFromGamepad();\n\n\t\t// Update the 3D model to reflect the button, thumbstick, and touchpad state\n\t\tObject.values( this.motionController.components ).forEach( ( component ) => {\n\n\t\t\t// Update node data based on the visual responses' current states\n\t\t\tObject.values( component.visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\t\tconst { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n\n\t\t\t\t// Skip if the visual response node is not found. No error is needed,\n\t\t\t\t// because it will have been reported at load time.\n\t\t\t\tif ( ! valueNode ) return;\n\n\t\t\t\t// Calculate the new properties based on the weight supplied\n\t\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY ) {\n\n\t\t\t\t\tvalueNode.visible = value;\n\n\t\t\t\t} else if ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\t\tvalueNode.quaternion.slerpQuaternions(\n\t\t\t\t\t\tminNode.quaternion,\n\t\t\t\t\t\tmaxNode.quaternion,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t\tvalueNode.position.lerpVectors(\n\t\t\t\t\t\tminNode.position,\n\t\t\t\t\t\tmaxNode.position,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes( motionController, scene ) {\n\n\t// Loop through the components and find the nodes needed for each components' visual responses\n\tObject.values( motionController.components ).forEach( ( component ) => {\n\n\t\tconst { type, touchPointNodeName, visualResponses } = component;\n\n\t\tif ( type === MotionControllerConstants.ComponentType.TOUCHPAD ) {\n\n\t\t\tcomponent.touchPointNode = scene.getObjectByName( touchPointNodeName );\n\t\t\tif ( component.touchPointNode ) {\n\n\t\t\t\t// Attach a touch dot to the touchpad.\n\t\t\t\tconst sphereGeometry = new SphereGeometry( 0.001 );\n\t\t\t\tconst material = new MeshBasicMaterial( { color: 0x0000FF } );\n\t\t\t\tconst sphere = new Mesh( sphereGeometry, material );\n\t\t\t\tcomponent.touchPointNode.add( sphere );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( `Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Loop through all the visual responses to be applied to this component\n\t\tObject.values( visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\tconst { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n\n\t\t\t// If animating a transform, find the two nodes to be interpolated between.\n\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\tvisualResponse.minNode = scene.getObjectByName( minNodeName );\n\t\t\t\tvisualResponse.maxNode = scene.getObjectByName( maxNodeName );\n\n\t\t\t\t// If the extents cannot be found, skip this animation\n\t\t\t\tif ( ! visualResponse.minNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${minNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! visualResponse.maxNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${maxNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If the target node cannot be found, skip this animation\n\t\t\tvisualResponse.valueNode = scene.getObjectByName( valueNodeName );\n\t\t\tif ( ! visualResponse.valueNode ) {\n\n\t\t\t\tconsole.warn( `Could not find ${valueNodeName} in the model` );\n\n\t\t\t}\n\n\t\t} );\n\n\t} );\n\n}\n\nfunction addAssetSceneToControllerModel( controllerModel, scene ) {\n\n\t// Find the nodes needed for animation and cache them on the motionController.\n\tfindNodes( controllerModel.motionController, scene );\n\n\t// Apply any environment map that the mesh already has set.\n\tif ( controllerModel.envMap ) {\n\n\t\tscene.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = controllerModel.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t// Add the glTF scene to the controllerModel.\n\tcontrollerModel.add( scene );\n\n}\n\nclass XRControllerModelFactory {\n\n\tconstructor( gltfLoader, path ) {\n\n\t\tthis.gltfLoader = gltfLoader;\n\t\tthis.path = path || DEFAULT_PROFILES_PATH;\n\t\tthis._assetCache = {};\n\n\t}\n\n\tcreateControllerModel( controller ) {\n\n\t\tconst controllerModel = new XRControllerModel();\n\t\tlet scene = null;\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.targetRayMode !== 'tracked-pointer' || ! xrInputSource.gamepad ) return;\n\n\t\t\tfetchProfile( xrInputSource, this.path, DEFAULT_PROFILE ).then( ( { profile, assetPath } ) => {\n\n\t\t\t\tcontrollerModel.motionController = new MotionController(\n\t\t\t\t\txrInputSource,\n\t\t\t\t\tprofile,\n\t\t\t\t\tassetPath\n\t\t\t\t);\n\n\t\t\t\tconst buttons = [];\n\t\t\t\tconst axes = [];\n\t\t\t\tconst gamepadMappings = { buttons, axes };\n\t\t\t\tcontrollerModel.gamepadMappings = gamepadMappings;\n\n\t\t\t\tif (controllerModel.motionController.layoutDescription?.components) {\n\t\t\t\t\tfor (let [name, details] of Object.entries(controllerModel.motionController.layoutDescription.components)) {\n\t\t\t\t\t\tname = name.replace('xr-standard-', '');\n\t\t\t\t\t\tfor (const [type, index] of Object.entries(details.gamepadIndices)) {\n\t\t\t\t\t\t\tif (type === 'button') {\n\t\t\t\t\t\t\t\tbuttons[index] = name;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\taxes[index] = {name,type};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst cachedAsset = this._assetCache[ controllerModel.motionController.assetUrl ];\n\t\t\t\tif ( cachedAsset ) {\n\n\t\t\t\t\tscene = cachedAsset.scene.clone();\n\n\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! this.gltfLoader ) {\n\n\t\t\t\t\t\tthrow new Error( 'GLTFLoader not set.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.gltfLoader.setPath( '' );\n\t\t\t\t\tthis.gltfLoader.load( controllerModel.motionController.assetUrl, ( asset ) => {\n\n\t\t\t\t\t\tthis._assetCache[ controllerModel.motionController.assetUrl ] = asset;\n\n\t\t\t\t\t\tscene = asset.scene.clone();\n\n\t\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t() => {\n\n\t\t\t\t\t\tthrow new Error( `Asset ${controllerModel.motionController.assetUrl} missing or malformed.` );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} ).catch( ( err ) => {\n\n\t\t\t\tconsole.warn( err );\n\n\t\t\t} );\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontrollerModel.motionController = null;\n\t\t\tcontrollerModel.remove( scene );\n\t\t\tscene = null;\n\n\t\t} );\n\n\t\treturn controllerModel;\n\n\t}\n\n}\n\nexport { XRControllerModelFactory };\n","/* global AFRAME, THREE */\n\nimport { XRControllerModelFactory } from './lib/XRControllerModelFactory.js';\n\nconst __version__ = __version__;\nconst DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets/dist/profiles\";\nconst DEFAULT_HAND_PROFILE_PATH = DEFAULT_PROFILES_PATH + \"/generic-hand\";\nconst LIB_URL = \"https://cdn.jsdelivr.net/npm/handy-work\" + (__version__ ? '@' + __version__ : '');\nconst LIB = LIB_URL + \"/build/esm/handy-work.standalone.js\";\nconst POSE_FOLDER = LIB_URL + \"/poses/\";\nconst clamp = (a, min = 0, max = 1) => Math.min(max, Math.max(min, a));\nconst invlerp = (x, y, a) => clamp((a - x) / (y - x));\nconst prevGamePads = new Map();\nconst changedAxes = new Set();\n\nconst tempVector3 = new THREE.Vector3();\nconst tempVector3_A = new THREE.Vector3();\nconst tempVector3_B = new THREE.Vector3();\nconst tempQuaternion_A = new THREE.Quaternion();\nconst tempQuaternion_B = new THREE.Quaternion();\n\nfunction moveAroundAndTranslate(object3D, center, quaternion, translate) {\n  object3D.position.sub(center);\n  object3D.position.applyQuaternion(quaternion);\n  object3D.position.add(center);\n  object3D.applyQuaternion(quaternion);\n  object3D.position.add(translate);\n}\nconst joints = [\n  \"wrist\",\n  \"thumb-metacarpal\",\n  \"thumb-phalanx-proximal\",\n  \"thumb-phalanx-distal\",\n  \"thumb-tip\",\n  \"index-finger-metacarpal\",\n  \"index-finger-phalanx-proximal\",\n  \"index-finger-phalanx-intermediate\",\n  \"index-finger-phalanx-distal\",\n  \"index-finger-tip\",\n  \"middle-finger-metacarpal\",\n  \"middle-finger-phalanx-proximal\",\n  \"middle-finger-phalanx-intermediate\",\n  \"middle-finger-phalanx-distal\",\n  \"middle-finger-tip\",\n  \"ring-finger-metacarpal\",\n  \"ring-finger-phalanx-proximal\",\n  \"ring-finger-phalanx-intermediate\",\n  \"ring-finger-phalanx-distal\",\n  \"ring-finger-tip\",\n  \"pinky-finger-metacarpal\",\n  \"pinky-finger-phalanx-proximal\",\n  \"pinky-finger-phalanx-intermediate\",\n  \"pinky-finger-phalanx-distal\",\n  \"pinky-finger-tip\",\n];\n\nAFRAME.registerComponent(\"handy-controls\", {\n  schema: {\n    renderGamepad: {\n      default: true,\n      description: `Whether to render a gamepad model when it's not doing hand tracking`\n    },\n    left: {\n      description: 'URL for left controller',\n      type: 'model',\n      default: DEFAULT_HAND_PROFILE_PATH + \"/left.glb\",\n    },\n    right: {\n      description: 'URL for right controller',\n      type: 'model',\n      default: DEFAULT_HAND_PROFILE_PATH + \"/right.glb\",\n    },\n    materialOverride: {\n      description: 'Which hand to use the `material` component for',\n      oneOf: ['both', 'left', 'right', 'none'],\n      default: 'both'\n    },\n    fuseVShort: {\n      description: 'Time for a pose to trigger a pose event (ms)',\n      default:48\n    },\n    fuseShort: {\n      description: 'Time for a pose to trigger a pose_fuseShort event (ms)',\n      default:480\n    },\n    fuseLong: {\n      description: 'Time for a pose to trigger a pose_fuseLong event (ms)',\n      default:1440\n    }\n  },\n  init() {\n    this.handyWorkCallback = this.handyWorkCallback.bind(this);\n    \n    const webxrData = this.el.sceneEl.getAttribute('webxr');\n    const optionalFeaturesArray = webxrData.optionalFeatures;\n    if (!optionalFeaturesArray.includes('hand-tracking')) {\n      optionalFeaturesArray.push('hand-tracking');\n      this.el.sceneEl.setAttribute('webxr', webxrData);\n    }\n    \n    this.loader = new THREE.GLTFLoader();\n    const self = this;\n    const dracoLoader = this.el.sceneEl.systems['gltf-model'].getDRACOLoader();\n    const meshoptDecoder = this.el.sceneEl.systems['gltf-model'].getMeshoptDecoder();\n    this.controllerModelFactory = new XRControllerModelFactory(this.loader, DEFAULT_PROFILES_PATH);\n    this.model = null;\n    if (dracoLoader) {\n      this.loader.setDRACOLoader(dracoLoader);\n    }\n    if (meshoptDecoder) {\n      this.ready = meshoptDecoder.then(function (meshoptDecoder) {\n        self.loader.setMeshoptDecoder(meshoptDecoder);\n      });\n    } else {\n      this.ready = Promise.resolve();\n    }\n    \n    import(LIB)\n    .then(function ({\n\t\t\tupdate,\n\t\t\tloadPose,\n\t\t\tdumpHands,\n      setPose,\n      getPose\n    }) {\n      this.handyWorkUpdate = update;\n      this.dumpHands = dumpHands;\n      this.loadPose = loadPose;\n      this.setPose = setPose;\n      this.getPose = getPose;\n\n      loadPose('relax', POSE_FOLDER + 'relax.handpose');\n      loadPose('fist', POSE_FOLDER + 'fist.handpose');\n      loadPose('flat', POSE_FOLDER + 'flat.handpose');\n      loadPose('point', POSE_FOLDER + 'point.handpose');\n      loadPose('horns', POSE_FOLDER + 'horns.handpose');\n      loadPose('shaka', POSE_FOLDER + 'shaka.handpose');\n      loadPose('vulcan', POSE_FOLDER + 'vulcan.handpose');\n    }.bind(this));\n    \n    for (const handedness of ['left', 'right']) {\n      const els = Array.from(this.el.querySelectorAll(`[data-${handedness}]`));\n      for (const el of els) {\n        el.object3D.visible = false;\n      }\n    }\n    \n    this.gripOffset = {\n      right: new THREE.Vector3(-0.005, -0.03, 0),\n      left: new THREE.Vector3(0.005, -0.03, 0)\n    };\n    this.gripQuaternions = {\n      right: [new THREE.Quaternion().setFromUnitVectors(\n        new THREE.Vector3(0,0,-1),\n        new THREE.Vector3(-1,0,0).normalize()\n      ),new THREE.Quaternion().setFromUnitVectors(\n        new THREE.Vector3(0,1,0),\n        new THREE.Vector3(-1,0,0)\n      )],\n      left: [new THREE.Quaternion().setFromUnitVectors(\n        new THREE.Vector3(0,0,1),\n        new THREE.Vector3(1,0,0).normalize()\n      ),new THREE.Quaternion().setFromUnitVectors(\n        new THREE.Vector3(1,1,0),\n        new THREE.Vector3(-1,0,-1)\n      )]\n    };\n  },\n\n  async gltfToJoints(src, name) {\n    const el = this.el;\n    await this.ready;\n\n    const gltf = await new Promise(function (resolve, reject) {\n      this.loader.load(src, resolve, undefined, reject);\n    }.bind(this));\n\n    const object = gltf.scene.children[0];\n    const mesh = object.getObjectByProperty(\"type\", \"SkinnedMesh\");\n    \n    if (this.el.components.material) {\n      if (this.data.materialOverride === 'both' || this.data.materialOverride === name) {\n        mesh.material = this.el.components.material.material;\n      }\n    }\n    \n    mesh.visible = false;\n    mesh.frustumCulled = false;\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    mesh.skeleton.pose();\n    \n    const bones = [];\n    for (const jointName of joints) {\n      const bone = object.getObjectByName(jointName);\n      if (bone !== undefined) {\n        bone.jointName = jointName;\n        bones.push(bone);\n        bone.applyMatrix4(this.el.object3D.matrixWorld);\n        bone.updateMatrixWorld();\n      } else {\n        console.warn(`Couldn't find ${jointName} in ${src} hand mesh`);\n        bones.push(undefined); // add an empty slot\n      }\n    }\n    el.setObject3D('hand-mesh-' + name, mesh);\n    el.emit(\"model-loaded\", { format: \"gltf\", model: mesh });\n    return bones;\n  },\n\n  async update(oldData) {\n    const el = this.el;\n    const srcLeft = this.data.left;\n    const srcRight = this.data.right;\n\n    // Only reload models if they changed\n    if (\n      oldData.left !== this.data.left ||\n      oldData.right !== this.data.right ||\n      oldData.renderGamepad !== this.data.renderGamepad\n    ) {\n      this.remove();\n    }\n    if (oldData.left !== this.data.left || oldData.right !== this.data.right) {\n      try {\n        this.bonesRight = await this.gltfToJoints(srcRight, \"right\");\n        this.bonesLeft = await this.gltfToJoints(srcLeft, \"left\");\n      } catch (error) {\n        const message = error && error.message ? error.message : \"Failed to load glTF model\";\n        console.warn(message);\n        el.emit(\"hand-model-error\", { message });\n      }\n    }\n  },\n\n  getControllerModel(index, inputSource) {\n    const object = this.el.getObject3D('controller-model-' + inputSource.handedness);\n    if (object) {\n      return object;\n    } else {\n      const renderer = this.el.sceneEl.renderer;\n      const group = renderer.xr.getControllerGrip(index);\n      const model = this.controllerModelFactory.createControllerModel(group);\n      group.dispatchEvent({\n        type: 'connected',\n        data: inputSource\n      });\n      this.el.setObject3D('controller-model-' + inputSource.handedness, model);\n      return model;\n    }\n  },\n\n  tick() {\n    const session = this.el.sceneEl.xrSession;\n    if (!session) return;\n    const renderer = this.el.sceneEl.renderer;\n    const referenceSpace = renderer.xr.getReferenceSpace();\n    const toUpdate = [];\n    const frame = this.el.sceneEl.frame;\n    \n    let i=-1;\n    inputSourceLoop:\n    for (const inputSource of session.inputSources) {\n      i++;\n      const magnetEl = this.el.querySelector(`[data-magnet][data-${inputSource.handedness}]`);\n      let magnetTarget = null;\n      let fadeT = 1;\n      let bones = [];\n      const toMagnet = [];\n      let controllerModel;\n      \n      const currentMesh = this.el.getObject3D(\"hand-mesh-\" + inputSource.handedness);\n      if (!currentMesh) return;\n      \n      const allEls = Array.from(this.el.querySelectorAll(`[data-${inputSource.handedness}]`));\n\n      const elMap = new Map();\n      for (const el of allEls) {\n        const poseName = el.dataset[inputSource.handedness];\n        const elArray = elMap.get(poseName) || [];\n        elArray.push(el);\n        elMap.set(poseName, elArray);\n      }\n\n      if (!inputSource.hand) {\n        for (const el of allEls) {\n          el.object3D.visible = false;\n        }\n        currentMesh.visible = false;\n\n        if (this.data.renderGamepad) {\n          controllerModel = this.getControllerModel(i, inputSource);\n          controllerModel.visible = true;\n\n          if (inputSource.gripSpace) {\n            const pose = frame.getPose(inputSource.gripSpace, referenceSpace);\n            if (pose) {\n              controllerModel.position.copy(pose.transform.position);\n              controllerModel.quaternion.copy(pose.transform.orientation);\n              toMagnet.push(controllerModel);\n              if (elMap.has('grip')) for (const el of elMap.get('grip')) {\n                el.object3D.position.copy(pose.transform.position);\n                el.object3D.quaternion.copy(pose.transform.orientation);\n                el.object3D.visible = (el.getDOMAttribute('visible') !== false);\n                if (el.dataset.noMagnet === undefined) toMagnet.push(el.object3D);\n              }\n            }\n          }\n\n          // if it has a gamepad fire events for gamepad changes\n          if (inputSource.gamepad) {\n            const old = prevGamePads.get(inputSource);\n            const data = {\n              buttons: inputSource.gamepad.buttons.map(b => b.value),\n              axes: inputSource.gamepad.axes.slice(0)\n            };\n            if (old) {\n              const eventDetails = {handedness: inputSource.handedness, inputSource, data}\n              data.buttons.forEach((value,i)=>{\n                if (value !== old.buttons[i]) {\n                  let name = controllerModel.gamepadMappings?.buttons[i] || `button${i}`;\n                  if (value === 1) {\n                    this.emitGamepad(allEls, `${name}down`, Object.assign({value}, eventDetails));\n                  } else {\n                    this.emitGamepad(allEls, `${name}up`, Object.assign({value}, eventDetails));\n                  }\n                }\n              });\n              const axesMapping = controllerModel.gamepadMappings?.axes;\n              if (axesMapping && axesMapping.length) {\n                // There are some named axis so try to combine them together\n                changedAxes.clear();\n                const details =  {};\n                axesMapping.forEach(({name}, i)=>{\n                  if (name) {\n                    const value = data.axes[i];\n                    if (value !== old.axes[i]) {\n                      changedAxes.add(name);\n                    }\n                  }\n                });\n                if (changedAxes.size) {\n                  axesMapping.forEach(({name, type}, i)=>{\n                    if (name && changedAxes.has(name)) {\n                      const value = data.axes[i];\n                      details[name] =  details[name] || {};\n                      details[name][type.slice(0,1)] = value;\n                    }\n                  });\n                  for (const [name, detail] of Object.entries(details)) {\n                    this.emitGamepad(allEls, `${name}moved`, Object.assign(detail, eventDetails));\n                  }\n                }\n              } else {\n                data.axes.forEach((value,i)=>{\n                  let name = controllerModel.gamepadMappings?.axes[i] || `axes${i}`;\n                  if (value !== old.axes[i]) {\n                    this.emitGamepad(allEls, `${name}changed`, Object.assign({value}, eventDetails));\n                  }\n                });\n              }\n            }\n            prevGamePads.set(inputSource, data);\n          }\n        }\n      } else {\n        toUpdate.push(inputSource);\n        const controllerModel = this.el.getObject3D('controller-model-' + inputSource.handedness);\n        if (controllerModel) controllerModel.visible = false;\n  \n        bones =\n          (inputSource.handedness === \"right\" && this.bonesRight) ||\n          (inputSource.handedness === \"left\" && this.bonesLeft);\n        if (!bones.length) continue;\n        for (const bone of bones) {\n          const joint = inputSource.hand.get(bone.jointName);\n          if (joint) {\n            const pose = frame.getJointPose(joint, referenceSpace);\n            if (pose) {\n              currentMesh.visible = true;\n              if (elMap.has(bone.jointName)) {\n                for (const el of elMap.get(bone.jointName)) {\n                  el.object3D.position.copy(pose.transform.position);\n                  el.object3D.quaternion.copy(pose.transform.orientation);\n                  el.object3D.visible = (el.getDOMAttribute('visible') !== false);\n                  if (el.dataset.noMagnet === undefined) toMagnet.push(el.object3D);\n                }\n              }\n              \n              if (bone.jointName === \"middle-finger-metacarpal\") {\n                if (elMap.has('grip')) {\n                  for (const el of elMap.get('grip')) {\n                    el.object3D.quaternion.copy(pose.transform.orientation);\n                    this.gripQuaternions[inputSource.handedness].forEach(q => el.object3D.quaternion.multiply(q));\n                    el.object3D.position.copy(this.gripOffset[inputSource.handedness]);\n                    el.object3D.position.applyQuaternion(el.object3D.quaternion);\n                    el.object3D.position.add(pose.transform.position);\n                    el.object3D.visible = (el.getDOMAttribute('visible') !== false);\n                    if (el.dataset.noMagnet === undefined) toMagnet.push(el.object3D);\n                  }\n                }\n              }\n              \n              bone.position.copy(pose.transform.position);\n              bone.quaternion.copy(pose.transform.orientation);\n            } else {\n              // Failed to get hand pose so continue looping over other inputSource\n              continue inputSourceLoop;\n            }\n          }\n        }\n      }\n\n      if (elMap.has('ray') && inputSource.targetRaySpace) {\n        const pose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n        if (pose) {\n          for (const el of elMap.get('ray')) {\n            el.object3D.position.copy(pose.transform.position);\n            el.object3D.quaternion.copy(pose.transform.orientation);\n            el.object3D.visible = (el.getDOMAttribute('visible') !== false);\n            if (el.dataset.noMagnet === undefined) toMagnet.push(el.object3D);\n          }\n        }\n      }\n      \n      if (magnetEl) {\n        magnetEl.object3D.updateWorldMatrix(true, false);\n        const magnetTargets = Array.from(document.querySelectorAll(magnetEl.dataset.magnet));\n        for (const el of magnetTargets) {\n          const [magnetRange,fadeEnd] = (el.dataset.magnetRange || \"0.2,0.1\").split(',').map(n => Number(n));\n          el.object3D.getWorldPosition(tempVector3);\n          magnetEl.object3D.worldToLocal(tempVector3);\n          \n          const d = tempVector3.length();\n          if (d < magnetRange) {\n            magnetTarget = el;\n            \n            if (fadeEnd) {\n              fadeT = invlerp(magnetRange,fadeEnd,d);\n            } else {\n              fadeT = 1;\n            }\n            \n            break;\n          }\n        }\n      }\n      \n      if (magnetTarget) {\n        \n        magnetTarget.object3D.getWorldPosition(tempVector3_A);\n        magnetEl.object3D.getWorldPosition(tempVector3_B);\n        tempVector3_A.lerp(tempVector3_B, 1-fadeT).sub(tempVector3_B);\n        \n        magnetTarget.object3D.getWorldQuaternion(tempQuaternion_A);\n        magnetEl.object3D.getWorldQuaternion(tempQuaternion_B);\n        tempQuaternion_A.slerp(tempQuaternion_B, 1-fadeT).multiply(tempQuaternion_B.invert());\n        \n        tempVector3_B.copy(magnetEl.object3D.position);\n\n        for (const bone of bones) {\n          moveAroundAndTranslate(bone, tempVector3_B, tempQuaternion_A, tempVector3_A);\n          bone.applyMatrix4(this.el.object3D.matrixWorld);\n          bone.updateMatrixWorld();\n        }\n\n        // Move elements to match the bones but skil elements which are marked data-no-magnet\n        for (const object3D of toMagnet) {\n          moveAroundAndTranslate(object3D, tempVector3_B, tempQuaternion_A, tempVector3_A);\n        }\n      } else {\n        for (const bone of bones) {\n          bone.applyMatrix4(this.el.object3D.matrixWorld);\n          bone.updateMatrixWorld();\n        }\n      }\n    }\n\n    // perform hand pose detection\n    if (toUpdate.length && this.handyWorkUpdate) {\n      this.handyWorkUpdate(\n        toUpdate,\n        referenceSpace,\n        frame,\n        this.handyWorkCallback\n      );\n    }\n  },\n  handyWorkCallback: function ({\n\t\tdistances, handedness\n\t}) {\n\t\tthis.emit(distances[0][0], handedness, {\n      pose: distances[0][0],\n      poses: distances,\n      handedness\n    });\n\t},\n  emitGamepad (els, name, details) {\n    details.event = name;\n    this.el.emit(name, details);\n    this.el.emit('gamepad', details);\n\n    for (const el of els) {\n      el.emit(name, details, false);\n      el.emit('gamepad', details, false);\n    }\n  },\n  emit(name, handedness, details) {\n    if (name === this[handedness + '_currentPose']) return;\n    const els = Array.from(this.el.querySelectorAll(`[data-${handedness}]`));\n    \n    clearTimeout(this[handedness + '_vshortTimeout']);\n    clearTimeout(this[handedness + '_shortTimeout']);\n    clearTimeout(this[handedness + '_longTimeout']);\n    \n    this[handedness + '_currentPose'] = name;\n\n    this[handedness + '_vshortTimeout'] = setTimeout(() => {\n      this.el.emit('pose_' + name, details);\n      this.el.emit('pose', details);\n\n      for (const el of els) {\n        el.emit('pose_' + name, details, false);\n        el.emit('pose', details, false);\n      }\n    }, this.data.fuseVShort);\n    \n    this[handedness + '_shortTimeout'] = setTimeout(() => {\n      // console.log('Emiting ', name + '_fuseShort');\n      this.el.emit('pose_' + name + '_fuseShort', details);\n      for (const el of els) el.emit('pose_' + name + '_fuseShort', details, false);\n    }, this.data.fuseShort);\n    \n    this[handedness + '_longTimeout'] = setTimeout(() => {\n      // console.log('Emiting ', name + '_fuseLong');\n      this.el.emit('pose_' + name + '_fuseLong', details);    \n      for (const el of els) el.emit('pose_' + name + '_fuseLong', details, false);\n    }, this.data.fuseLong);\n  },\n  remove() {\n    if (this.bonesLeft) {\n      this.bonesLeft = null;\n      this.el.removeObject3D(\"hand-mesh-left\");\n    }\n    if (this.bonesRight) {\n      this.bonesRight = null;\n      this.el.removeObject3D(\"hand-mesh-right\")\n    }\n    if (this.el.getObject3D('controller-model-left')) {\n      this.el.removeObject3D('controller-model-left')\n    }\n    if (this.el.getObject3D('controller-model-right')) {\n      this.el.removeObject3D('controller-model-right')\n    }\n  },\n});\n"],"names":["Constants","Handedness","Object","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","async","fetchJsonFile","path","response","fetch","ok","json","Error","statusText","fetchProfile","xrInputSource","basePath","defaultProfile","getAssetPath","supportedProfilesList","fetchProfilesList","match","profiles","some","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","layout","handedness","layouts","keys","replace","defaultComponentValues","xAxis","yAxis","button","state","VisualResponse","constructor","visualResponseDescription","this","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","normalizedXAxis","normalizedYAxis","x","y","Math","sqrt","theta","atan2","cos","sin","normalizeAxes","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","undefined","data","updateFromGamepad","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","gripSpace","targetRaySpace","component","push","Mesh","MeshBasicMaterial","Object3D","SphereGeometry","THREE","XRControllerModel","super","motionController","envMap","setEnvironmentMap","traverse","child","isMesh","material","needsUpdate","updateMatrixWorld","force","valueNode","minNode","maxNode","MotionControllerConstants","visible","quaternion","slerpQuaternions","position","lerpVectors","addAssetSceneToControllerModel","controllerModel","scene","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","findNodes","XRControllerModelFactory","gltfLoader","_assetCache","createControllerModel","controller","addEventListener","event","targetRayMode","then","gamepadMappings","name","details","entries","index","cachedAsset","clone","setPath","load","asset","catch","err","remove","DEFAULT_PROFILES_PATH","DEFAULT_HAND_PROFILE_PATH","LIB_URL","POSE_FOLDER","invlerp","a","min","max","clamp","prevGamePads","Map","changedAxes","Set","tempVector3","Vector3","tempVector3_A","tempVector3_B","tempQuaternion_A","Quaternion","tempQuaternion_B","moveAroundAndTranslate","object3D","center","translate","sub","applyQuaternion","joints","AFRAME","registerComponent","schema","renderGamepad","default","description","left","right","materialOverride","oneOf","fuseVShort","fuseShort","fuseLong","init","handyWorkCallback","bind","webxrData","el","sceneEl","getAttribute","optionalFeaturesArray","optionalFeatures","setAttribute","loader","GLTFLoader","self","dracoLoader","systems","getDRACOLoader","meshoptDecoder","getMeshoptDecoder","controllerModelFactory","model","setDRACOLoader","ready","setMeshoptDecoder","Promise","resolve","import","update","loadPose","dumpHands","setPose","getPose","handyWorkUpdate","els","Array","from","querySelectorAll","gripOffset","gripQuaternions","setFromUnitVectors","normalize","src","object","reject","children","mesh","getObjectByProperty","frustumCulled","castShadow","receiveShadow","skeleton","pose","bones","jointName","bone","applyMatrix4","matrixWorld","setObject3D","emit","format","oldData","srcLeft","srcRight","bonesRight","gltfToJoints","bonesLeft","error","message","getControllerModel","inputSource","getObject3D","group","renderer","xr","getControllerGrip","dispatchEvent","tick","session","xrSession","referenceSpace","getReferenceSpace","toUpdate","frame","i","inputSourceLoop","inputSources","magnetEl","querySelector","magnetTarget","fadeT","toMagnet","currentMesh","allEls","elMap","poseName","dataset","elArray","get","set","hand","joint","getJointPose","has","copy","transform","orientation","getDOMAttribute","noMagnet","q","multiply","old","map","b","slice","eventDetails","emitGamepad","axesMapping","clear","size","detail","updateWorldMatrix","magnetTargets","document","magnet","magnetRange","fadeEnd","split","n","Number","getWorldPosition","worldToLocal","d","lerp","getWorldQuaternion","slerp","invert","distances","poses","clearTimeout","setTimeout","removeObject3D"],"mappings":"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"}