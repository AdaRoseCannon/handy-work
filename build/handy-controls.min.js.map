{"version":3,"file":"handy-controls.min.js","sources":["../node_modules/three/examples/jsm/libs/motion-controllers.module.js","../src/lib/XRControllerModelFactory.js","../src/handy-controls.js"],"sourcesContent":["/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\nconst Constants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n\n  ButtonTouchThreshold: 0.05,\n\n  AxisTouchThreshold: 0.1,\n\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  // Get the list of profiles\n  const supportedProfilesList = await fetchProfilesList(basePath);\n\n  // Find the relative path to the first requested profile that is recognized\n  let match;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n\n  let assetPath;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(\n        `No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`\n      );\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return { profile, assetPath };\n}\n\n/** @constant {Object} */\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: Constants.ComponentState.DEFAULT\n};\n\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n\n  // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n  const hypotenuse = Math.sqrt((x * x) + (y * y));\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n\n  // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n  const result = {\n    normalizedXAxis: (xAxis * 0.5) + 0.5,\n    normalizedYAxis: (yAxis * 0.5) + 0.5\n  };\n  return result;\n}\n\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === Constants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n\n    // Initializes the response's current value based on default data\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis, yAxis, button, state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case Constants.ComponentProperty.X_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedXAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.Y_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedYAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.BUTTON:\n        this.value = (this.states.includes(state)) ? button : 0;\n        break;\n      case Constants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === Constants.VisualResponseProperty.VISIBILITY) {\n          this.value = (this.states.includes(state));\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId\n     || !componentDescription\n     || !componentDescription.visualResponses\n     || !componentDescription.gamepadIndices\n     || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n\n    // Build all the visual responses for this component\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n\n    // Set default values\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n\n    this.values = {\n      state: Constants.ComponentState.DEFAULT,\n      button: (this.gamepadIndices.button !== undefined) ? 0 : undefined,\n      xAxis: (this.gamepadIndices.xAxis !== undefined) ? 0 : undefined,\n      yAxis: (this.gamepadIndices.yAxis !== undefined) ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = Constants.ComponentState.DEFAULT;\n\n    // Get and normalize button\n    if (this.gamepadIndices.button !== undefined\n        && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = (this.values.button < 0) ? 0 : this.values.button;\n      this.values.button = (this.values.button > 1) ? 1 : this.values.button;\n\n      // Set the state based on the button\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = Constants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > Constants.ButtonTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize x axis value\n    if (this.gamepadIndices.xAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = (this.values.xAxis < -1) ? -1 : this.values.xAxis;\n      this.values.xAxis = (this.values.xAxis > 1) ? 1 : this.values.xAxis;\n\n      // If the state is still default, check if the xAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.xAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize Y axis value\n    if (this.gamepadIndices.yAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = (this.values.yAxis < -1) ? -1 : this.values.yAxis;\n      this.values.yAxis = (this.values.yAxis > 1) ? 1 : this.values.yAxis;\n\n      // If the state is still default, check if the yAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.yAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Update the visual response weights based on the current component data\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\n\n/**\n  * @description Builds a motion controller with components and visual responses based on the\n  * supplied profile description. Data is polled from the xrInputSource's gamepad.\n  * @author Nell Waliczek / https://github.com/NellWaliczek\n*/\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n\n    // Build child components as described in the profile description\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n\n    // Initialize components based on current gamepad state\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\n\nexport { Constants, MotionController, fetchProfile, fetchProfilesList };\n","/* global THREE */\nconst {\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tSphereGeometry,\n} = THREE;\n\nimport {\n\tConstants as MotionControllerConstants,\n\tfetchProfile,\n\tMotionController\n} from 'three/examples/jsm/libs/motion-controllers.module.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t}\n\n\tsetEnvironmentMap( envMap ) {\n\n\t\tif ( this.envMap == envMap ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.envMap = envMap;\n\t\tthis.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = this.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Polls data from the XRInputSource and updates the model's components to match\n\t * the real world data\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( ! this.motionController ) return;\n\n\t\t// Cause the MotionController to poll the Gamepad for data\n\t\tthis.motionController.updateFromGamepad();\n\n\t\t// Update the 3D model to reflect the button, thumbstick, and touchpad state\n\t\tObject.values( this.motionController.components ).forEach( ( component ) => {\n\n\t\t\t// Update node data based on the visual responses' current states\n\t\t\tObject.values( component.visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\t\tconst { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n\n\t\t\t\t// Skip if the visual response node is not found. No error is needed,\n\t\t\t\t// because it will have been reported at load time.\n\t\t\t\tif ( ! valueNode ) return;\n\n\t\t\t\t// Calculate the new properties based on the weight supplied\n\t\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY ) {\n\n\t\t\t\t\tvalueNode.visible = value;\n\n\t\t\t\t} else if ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\t\tvalueNode.quaternion.slerpQuaternions(\n\t\t\t\t\t\tminNode.quaternion,\n\t\t\t\t\t\tmaxNode.quaternion,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t\tvalueNode.position.lerpVectors(\n\t\t\t\t\t\tminNode.position,\n\t\t\t\t\t\tmaxNode.position,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes( motionController, scene ) {\n\n\t// Loop through the components and find the nodes needed for each components' visual responses\n\tObject.values( motionController.components ).forEach( ( component ) => {\n\n\t\tconst { type, touchPointNodeName, visualResponses } = component;\n\n\t\tif ( type === MotionControllerConstants.ComponentType.TOUCHPAD ) {\n\n\t\t\tcomponent.touchPointNode = scene.getObjectByName( touchPointNodeName );\n\t\t\tif ( component.touchPointNode ) {\n\n\t\t\t\t// Attach a touch dot to the touchpad.\n\t\t\t\tconst sphereGeometry = new SphereGeometry( 0.001 );\n\t\t\t\tconst material = new MeshBasicMaterial( { color: 0x0000FF } );\n\t\t\t\tconst sphere = new Mesh( sphereGeometry, material );\n\t\t\t\tcomponent.touchPointNode.add( sphere );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( `Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Loop through all the visual responses to be applied to this component\n\t\tObject.values( visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\tconst { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n\n\t\t\t// If animating a transform, find the two nodes to be interpolated between.\n\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\tvisualResponse.minNode = scene.getObjectByName( minNodeName );\n\t\t\t\tvisualResponse.maxNode = scene.getObjectByName( maxNodeName );\n\n\t\t\t\t// If the extents cannot be found, skip this animation\n\t\t\t\tif ( ! visualResponse.minNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${minNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! visualResponse.maxNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${maxNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If the target node cannot be found, skip this animation\n\t\t\tvisualResponse.valueNode = scene.getObjectByName( valueNodeName );\n\t\t\tif ( ! visualResponse.valueNode ) {\n\n\t\t\t\tconsole.warn( `Could not find ${valueNodeName} in the model` );\n\n\t\t\t}\n\n\t\t} );\n\n\t} );\n\n}\n\nfunction addAssetSceneToControllerModel( controllerModel, scene ) {\n\n\t// Find the nodes needed for animation and cache them on the motionController.\n\tfindNodes( controllerModel.motionController, scene );\n\n\t// Apply any environment map that the mesh already has set.\n\tif ( controllerModel.envMap ) {\n\n\t\tscene.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = controllerModel.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t// Add the glTF scene to the controllerModel.\n\tcontrollerModel.add( scene );\n\n}\n\nclass XRControllerModelFactory {\n\n\tconstructor( gltfLoader, path ) {\n\n\t\tthis.gltfLoader = gltfLoader;\n\t\tthis.path = path || DEFAULT_PROFILES_PATH;\n\t\tthis._assetCache = {};\n\n\t}\n\n\tcreateControllerModel( controller ) {\n\n\t\tconst controllerModel = new XRControllerModel();\n\t\tlet scene = null;\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.targetRayMode !== 'tracked-pointer' || ! xrInputSource.gamepad ) return;\n\n\t\t\tfetchProfile( xrInputSource, this.path, DEFAULT_PROFILE ).then( ( { profile, assetPath } ) => {\n\n\t\t\t\tcontrollerModel.motionController = new MotionController(\n\t\t\t\t\txrInputSource,\n\t\t\t\t\tprofile,\n\t\t\t\t\tassetPath\n\t\t\t\t);\n\n\t\t\t\tconst buttons = [];\n\t\t\t\tconst axes = [];\n\t\t\t\tconst gamepadMappings = { buttons, axes };\n\t\t\t\tcontrollerModel.gamepadMappings = gamepadMappings;\n\n\t\t\t\tif (controllerModel.motionController.layoutDescription?.components) {\n\t\t\t\t\tfor (let [name, details] of Object.entries(controllerModel.motionController.layoutDescription.components)) {\n\t\t\t\t\t\tname = name.replace('xr-standard-', '');\n\t\t\t\t\t\tfor (const [type, index] of Object.entries(details.gamepadIndices)) {\n\t\t\t\t\t\t\tif (type === 'button') {\n\t\t\t\t\t\t\t\tbuttons[index] = name;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\taxes[index] = {name,type};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst cachedAsset = this._assetCache[ controllerModel.motionController.assetUrl ];\n\t\t\t\tif ( cachedAsset ) {\n\n\t\t\t\t\tscene = cachedAsset.scene.clone();\n\n\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! this.gltfLoader ) {\n\n\t\t\t\t\t\tthrow new Error( 'GLTFLoader not set.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.gltfLoader.setPath( '' );\n\t\t\t\t\tthis.gltfLoader.load( controllerModel.motionController.assetUrl, ( asset ) => {\n\n\t\t\t\t\t\tthis._assetCache[ controllerModel.motionController.assetUrl ] = asset;\n\n\t\t\t\t\t\tscene = asset.scene.clone();\n\n\t\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t() => {\n\n\t\t\t\t\t\tthrow new Error( `Asset ${controllerModel.motionController.assetUrl} missing or malformed.` );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} ).catch( ( err ) => {\n\n\t\t\t\tconsole.warn( err );\n\n\t\t\t} );\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontrollerModel.motionController = null;\n\t\t\tcontrollerModel.remove( scene );\n\t\t\tscene = null;\n\n\t\t} );\n\n\t\treturn controllerModel;\n\n\t}\n\n}\n\nexport { XRControllerModelFactory };\n","/* global AFRAME, THREE */\nimport { XRControllerModelFactory } from './lib/XRControllerModelFactory.js';\nconst __version__ = __version__;\nconst DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets/dist/profiles\";\nconst DEFAULT_HAND_PROFILE_PATH = DEFAULT_PROFILES_PATH + \"/generic-hand\";\nconst LIB_URL = \"https://cdn.jsdelivr.net/npm/handy-work\" + (__version__ ? '@' + __version__ : '');\nconst LIB = LIB_URL + \"/build/esm/handy-work.standalone.js\";\nconst POSE_FOLDER = LIB_URL + \"/poses/\";\nconst clamp = (a, min = 0, max = 1) => Math.min(max, Math.max(min, a));\nconst invlerp = (x, y, a) => clamp((a - x) / (y - x));\nconst prevGamePads = new Map();\nconst changedAxes = new Set();\n\nconst tempVector3_A = new THREE.Vector3();\nconst tempVector3_B = new THREE.Vector3();\nconst tempQuaternion_A = new THREE.Quaternion();\nconst tempQuaternion_B = new THREE.Quaternion();\nconst tempQuaternion_C = new THREE.Quaternion();\nconst handednesses = ['left', 'right', 'none'];\n\nconst joints = [\n  \"wrist\",\n  \"thumb-metacarpal\",\n  \"thumb-phalanx-proximal\",\n  \"thumb-phalanx-distal\",\n  \"thumb-tip\",\n  \"index-finger-metacarpal\",\n  \"index-finger-phalanx-proximal\",\n  \"index-finger-phalanx-intermediate\",\n  \"index-finger-phalanx-distal\",\n  \"index-finger-tip\",\n  \"middle-finger-metacarpal\",\n  \"middle-finger-phalanx-proximal\",\n  \"middle-finger-phalanx-intermediate\",\n  \"middle-finger-phalanx-distal\",\n  \"middle-finger-tip\",\n  \"ring-finger-metacarpal\",\n  \"ring-finger-phalanx-proximal\",\n  \"ring-finger-phalanx-intermediate\",\n  \"ring-finger-phalanx-distal\",\n  \"ring-finger-tip\",\n  \"pinky-finger-metacarpal\",\n  \"pinky-finger-phalanx-proximal\",\n  \"pinky-finger-phalanx-intermediate\",\n  \"pinky-finger-phalanx-distal\",\n  \"pinky-finger-tip\",\n];\n\nAFRAME.registerComponent(\"handy-controls\", {\n  schema: {\n    renderGamepad: {\n      oneOf: ['any', 'left', 'right', 'none', 'never'],\n      default: 'any',\n      description: `Whether to render a gamepad model when it's not doing hand tracking, right, none and left are the names of controller handedness, any is all of them, and never is to not draw gamepads`\n    },\n    left: {\n      description: 'URL for left controller',\n      type: 'model',\n      default: DEFAULT_HAND_PROFILE_PATH + \"/left.glb\",\n    },\n    right: {\n      description: 'URL for right controller',\n      type: 'model',\n      default: DEFAULT_HAND_PROFILE_PATH + \"/right.glb\",\n    },\n    materialOverride: {\n      description: 'Which hand to use the `material` component for',\n      oneOf: ['both', 'left', 'right', 'neither'],\n      default: 'both'\n    },\n    fuseVShort: {\n      description: 'Time for a pose to trigger a pose event (ms)',\n      default:48\n    },\n    fuseShort: {\n      description: 'Time for a pose to trigger a pose_fuseShort event (ms)',\n      default:480\n    },\n    fuseLong: {\n      description: 'Time for a pose to trigger a pose_fuseLong event (ms)',\n      default:1440\n    }\n  },\n  init() {\n    const sceneEl = this.el.sceneEl;\n    const webxrData = this.el.sceneEl.getAttribute('webxr');\n    const optionalFeaturesArray = webxrData.optionalFeatures;\n    if (!optionalFeaturesArray.includes('hand-tracking')) {\n      optionalFeaturesArray.push('hand-tracking');\n      this.el.sceneEl.setAttribute('webxr', webxrData);\n    }\n    \n    this.loader = new THREE.GLTFLoader();\n    const self = this;\n    const dracoLoader = this.el.sceneEl.systems['gltf-model'].getDRACOLoader();\n    const meshoptDecoder = this.el.sceneEl.systems['gltf-model'].getMeshoptDecoder();\n    this.controllerModelFactory = new XRControllerModelFactory(this.loader, DEFAULT_PROFILES_PATH);\n    this.model = null;\n    if (dracoLoader) {\n      this.loader.setDRACOLoader(dracoLoader);\n    }\n    if (meshoptDecoder) {\n      this.ready = meshoptDecoder.then(function (meshoptDecoder) {\n        self.loader.setMeshoptDecoder(meshoptDecoder);\n      });\n    } else {\n      this.ready = Promise.resolve();\n    }\n    \n    import(LIB)\n    .then(function ({\n\t\t\tupdate,\n\t\t\tloadPose,\n\t\t\tdumpHands,\n      setPose,\n      getPose\n    }) {\n      this.handyWorkUpdate = update;\n      this.dumpHands = dumpHands;\n      this.loadPose = loadPose;\n      this.setPose = setPose;\n      this.getPose = getPose;\n\n      loadPose('relax', POSE_FOLDER + 'relax.handpose');\n      loadPose('fist', POSE_FOLDER + 'fist.handpose');\n      loadPose('flat', POSE_FOLDER + 'flat.handpose');\n      loadPose('point', POSE_FOLDER + 'point.handpose');\n      loadPose('horns', POSE_FOLDER + 'horns.handpose');\n      loadPose('shaka', POSE_FOLDER + 'shaka.handpose');\n      loadPose('vulcan', POSE_FOLDER + 'vulcan.handpose');\n    }.bind(this));\n    \n    for (const handedness of handednesses) {\n      const els = Array.from(this.el.querySelectorAll(`[data-${handedness}]`));\n      for (const el of els) {\n        el.object3D.visible = false;\n      }\n    }\n\n    sceneEl.addEventListener(\"enter-vr\", () => {\n      for (const name of [\"select\", \"selectstart\", \"selectend\", \"squeeze\", \"squeezeend\", \"squeezestart\"])\n        sceneEl.xrSession.addEventListener(name, this.eventFactory(name, this));\n    });\n\n    this.elArrays = { left: [], right: [], none: [] };\n    this.elMaps = { left: new Map(), right: new Map(), none: new Map() };\n    this.magnetEls = new Map();\n    this.magnetTargets = new Map();\n\n    function reconstructElMaps() {\n      for (const handedness of handednesses) {\n        self.elArrays[handedness].splice(0);\n        self.elMaps[handedness].clear();\n        self.magnetEls.clear();\n        self.magnetTargets.clear();\n      }\n\n      const els = Array.from(self.el.children).filter(el=>el.dataset.left||el.dataset.right||el.dataset.none);\n      for (const el of els) {\n        for (const handedness of handednesses) {\n          if (el.dataset[handedness] !== undefined) {\n            self.elArrays[handedness].push(el);\n            const poseName = el.dataset[handedness];\n            const poseElArray = self.elMaps[handedness].get(poseName) || [];\n            poseElArray.push(el);\n            self.elMaps[handedness].set(poseName, poseElArray);\n\n            if (el.dataset.magnet) {\n              self.magnetEls.set(handedness, el);\n              self.magnetTargets.set(el, null);\n            }\n          }\n        }\n      }\n    }\n    reconstructElMaps();\n    // if the children of this element change then rebuild the lists\n    new MutationObserver(reconstructElMaps).observe(this.el, { childList: true });\n    // If any of the hands change position rebuild it\n    new MutationObserver(function (changes) {\n      if (changes.find(change => (\n        change.attributeName === 'data-none' ||\n        change.attributeName === 'data-left' ||\n        change.attributeName === 'data-right' ||\n        change.attributeName === 'data-magnet'\n      ))) reconstructElMaps();\n    }).observe(this.el, { attributes: true, subtree: true });\n  },\n\n  getMagnetTargets(el) {\n    const magnetTargets = this.magnetTargets.get(el);\n    if (magnetTargets === null) {\n      const magnetTargets = document.getElementsByClassName(el.dataset.magnet);\n      this.magnetTargets.set(el, magnetTargets);\n      return magnetTargets;\n    }\n    return magnetTargets;\n  },\n\n  async gltfToJoints(src, name) {\n    const el = this.el;\n    await this.ready;\n\n    const gltf = await new Promise(function (resolve, reject) {\n      this.loader.load(src, resolve, undefined, reject);\n    }.bind(this));\n\n    const object = gltf.scene.children[0];\n    const mesh = object.getObjectByProperty(\"type\", \"SkinnedMesh\");\n    \n    if (this.el.components.material) {\n      if (this.data.materialOverride === 'both' || this.data.materialOverride === name) {\n        mesh.material = this.el.components.material.material;\n      }\n    }\n    \n    mesh.visible = false;\n    mesh.frustumCulled = false;\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    mesh.skeleton.pose();\n    \n    const bones = [];\n    for (const jointName of joints) {\n      const bone = object.getObjectByName(jointName);\n      if (bone !== undefined) {\n        bone.jointName = jointName;\n        bones.push(bone);\n        bone.applyMatrix4(this.el.object3D.matrixWorld);\n        bone.updateMatrixWorld();\n      } else {\n        console.warn(`Couldn't find ${jointName} in ${src} hand mesh`);\n        bones.push(undefined); // add an empty slot\n      }\n    }\n    el.setObject3D('hand-mesh-' + name, mesh);\n    el.emit(\"model-loaded\", { format: \"gltf\", model: mesh });\n    return bones;\n  },\n\n  async update(oldData) {\n    const el = this.el;\n    const srcLeft = this.data.left;\n    const srcRight = this.data.right;\n\n    // Only reload models if they changed\n    if (\n      oldData.left !== this.data.left ||\n      oldData.right !== this.data.right ||\n      oldData.renderGamepad !== this.data.renderGamepad\n    ) {\n      this.remove();\n    }\n    if (oldData.left !== this.data.left || oldData.right !== this.data.right) {\n      try {\n        this.bonesRight = await this.gltfToJoints(srcRight, \"right\");\n        this.bonesLeft = await this.gltfToJoints(srcLeft, \"left\");\n      } catch (error) {\n        const message = error && error.message ? error.message : \"Failed to load glTF model\";\n        console.warn(message);\n        el.emit(\"hand-model-error\", { message });\n      }\n    }\n  },\n\n  eventFactory(eventName, bindTarget, event) {\n    function eventHandler(e) {\n      const session = this.el.sceneEl.xrSession;\n      const frame = e.frame;\n      const inputSource = e.inputSource;\n      const referenceSpace = this.el.sceneEl.renderer.xr.getReferenceSpace();\n      const pose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n      const handedness = e.inputSource.handedness;\n      const details = {\n        inputSource,\n        handedness,\n        frame\n      }\n      if (!pose) return;\n\n      const allEls = this.elArrays[handedness];\n      if (inputSource.targetRayMode === \"screen\") {\n        const name = `screen-${\n          Array.from(session.inputSources).filter(i=>i.targetRayMode === \"screen\").indexOf(inputSource)\n        }`;\n        for (const el of allEls) {\n          if (el.dataset[handedness] === name) {\n            el.object3D.position.copy(pose.transform.position);\n            el.object3D.quaternion.copy(pose.transform.orientation);\n            el.object3D.visible = (el.getDOMAttribute('visible') !== false);\n            el.emit(eventName, details);\n          }\n        }\n      } else if (inputSource.gamepad || inputSource.hand) {\n        for (const el of allEls) el.emit(eventName, details);\n      }\n    }\n    if (event) return eventHandler.call(bindTarget, event);\n    return eventHandler.bind(bindTarget);\n  },\n\n  getControllerModel(index, inputSource) {\n    const object = this.el.getObject3D('controller-model-' + inputSource.handedness);\n    if (object) {\n      return object;\n    } else {\n      const renderer = this.el.sceneEl.renderer;\n      const group = renderer.xr.getControllerGrip(index);\n      const model = this.controllerModelFactory.createControllerModel(group);\n\n      // This tells the controllerModel that a new inputSource was just added and a model should be generated\n      group.dispatchEvent({ type: 'connected', data: inputSource });\n      this.el.setObject3D('controller-model-' + inputSource.handedness, model);\n      return model;\n    }\n  },\n\n  tick() {\n    const self = this;\n    const session = this.el.sceneEl.xrSession;\n    if (!session) return;\n    const renderer = this.el.sceneEl.renderer;\n    const referenceSpace = renderer.xr.getReferenceSpace();\n    const toUpdate = [];\n    const frame = this.el.sceneEl.frame;\n    if (!frame) return;\n\n    let i=0;\n    let transientSourceIndex = 0;\n    inputSourceLoop:\n    for (const inputSource of session.inputSources) {\n      const inputSourceIndex = i++;\n      const magnetEl = this.magnetEls.get(inputSource.handedness);\n      let magnetTarget = null;\n      let fadeT = 1;\n      let bones = [];\n      const toMagnet = [];\n      let controllerModel;\n      let handMesh;\n      \n      const allEls = this.elArrays[inputSource.handedness];\n      const elMap = this.elMaps[inputSource.handedness];\n\n      handMesh = this.el.getObject3D(\"hand-mesh-\" + inputSource.handedness);\n      if (inputSource.hand) {\n        toUpdate.push(inputSource);\n        const controllerModel = this.el.getObject3D('controller-model-' + inputSource.handedness);\n        if (controllerModel) controllerModel.visible = false;\n  \n        bones =\n          (inputSource.handedness === \"right\" && this.bonesRight) ||\n          (inputSource.handedness === \"left\" && this.bonesLeft);\n        if (!bones.length) continue;\n        let hadAJointPose = false;\n        for (const bone of bones) {\n          const joint = inputSource.hand.get(bone.jointName);\n          toMagnet.push(bone);\n          if (joint) {\n\n            const pose = frame.getJointPose(joint, referenceSpace);\n            if (pose) {\n              hadAJointPose = true;\n\n              // if there are objects make them visible and set their position\n              if (elMap.has(bone.jointName)) {\n\n                if (handMesh.visible === false) {\n                  for (const el of elMap.get(bone.jointName)) {\n                    el.object3D.visible = (el.getDOMAttribute('visible') !== false);\n                  }\n                }\n\n                for (const el of elMap.get(bone.jointName)) {\n                  el.object3D.position.copy(pose.transform.position);\n                  el.object3D.quaternion.copy(pose.transform.orientation);\n                  if (el.dataset.noMagnet === undefined) toMagnet.push(el.object3D);\n                }\n              }\n              \n              bone.position.copy(pose.transform.position);\n              bone.quaternion.copy(pose.transform.orientation);\n            } else {\n              // Failed to get hand pose so continue looping over other inputSource\n              continue inputSourceLoop;\n            }\n          }\n        }\n        if (hadAJointPose) {\n          handMesh.visible = true;\n        }\n      } else if (handMesh)  {\n        handMesh.visible = false;\n\n        for (const el of allEls){\n          el.object3D.visible = false;\n        }\n      }\n\n      if (inputSource.targetRayMode === \"screen\") {\n        const name = `screen-${transientSourceIndex++}`;\n        if (elMap.has(name)) {\n          const pose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n          if (!pose) continue inputSourceLoop;\n          for (const el of elMap.get(name)) {\n            el.object3D.position.copy(pose.transform.position);\n            el.object3D.quaternion.copy(pose.transform.orientation);\n            el.object3D.visible = (el.getDOMAttribute('visible') !== false);\n          }\n        }\n\n        // Don't do the magnet behaviour and don't render any gamepads\n        continue inputSourceLoop;\n      }\n\n      // handle any tracked elements attached to the ray space of the input source this works for any types\n      for (const [name, inputSourcePose] of [\n        ['ray', inputSource.targetRaySpace],\n        ['grip', inputSource.gripSpace]\n      ]) {\n        if (elMap.has(name) && inputSourcePose) {\n          const pose = frame.getPose(inputSourcePose, referenceSpace);\n          if (pose) {\n            for (const el of elMap.get(name)) {\n              el.object3D.position.copy(pose.transform.position);\n              el.object3D.quaternion.copy(pose.transform.orientation);\n              const elShouldBeVisible = (el.getDOMAttribute('visible') !== false)\n              el.object3D.visible = elShouldBeVisible;\n              if (el.dataset.noMagnet === undefined) toMagnet.push(el.object3D);\n            }\n          }\n        }\n      }\n\n      // If we should draw gamepads then do, but don't draw gamepad and hand if btoh present\n      if (\n        (this.data.renderGamepad === \"any\" || this.data.renderGamepad === inputSource.handedness) &&\n        inputSource.gamepad && !inputSource.hand\n      ) {\n        controllerModel = this.getControllerModel(inputSourceIndex, inputSource);\n        controllerModel.visible = true;\n\n        if (inputSource.gripSpace) {\n          const pose = frame.getPose(inputSource.gripSpace, referenceSpace);\n          if (pose) {\n            controllerModel.position.copy(pose.transform.position);\n            controllerModel.quaternion.copy(pose.transform.orientation);\n            toMagnet.push(controllerModel);\n          }\n        }\n\n        // if it has a gamepad fire events for gamepad changes\n        const old = prevGamePads.get(inputSource);\n        const data = {\n          buttons: inputSource.gamepad.buttons.map(b => b.value),\n          axes: inputSource.gamepad.axes.slice(0)\n        };\n        if (old) {\n          const eventDetails = {handedness: inputSource.handedness, inputSource, data, frame}\n          data.buttons.forEach((value,i)=>{\n            if (value !== old.buttons[i]) {\n              let name = controllerModel.gamepadMappings?.buttons[i] || `button${i}`;\n              if (value === 1) {\n                this.emitGamepad(allEls, `${name}down`, Object.assign({value}, eventDetails));\n              } else {\n                this.emitGamepad(allEls, `${name}up`, Object.assign({value}, eventDetails));\n              }\n            }\n          });\n          const axesMapping = controllerModel.gamepadMappings?.axes;\n          if (axesMapping && axesMapping.length) {\n            // There are some named axis so try to combine them together\n            changedAxes.clear();\n            const details =  {};\n            axesMapping.forEach(({name}, i)=>{\n              if (name) {\n                const value = data.axes[i];\n                if (value !== old.axes[i]) {\n                  changedAxes.add(name);\n                }\n              }\n            });\n            if (changedAxes.size) {\n              axesMapping.forEach(({name, type}, i)=>{\n                if (name && changedAxes.has(name)) {\n                  const value = data.axes[i];\n                  details[name] =  details[name] || {};\n                  details[name][type.slice(0,1)] = value;\n                }\n              });\n              for (const [name, detail] of Object.entries(details)) {\n                this.emitGamepad(allEls, `${name}moved`, Object.assign(detail, eventDetails));\n              }\n            }\n          } else {\n            data.axes.forEach((value,i)=>{\n              let name = controllerModel.gamepadMappings?.axes[i] || `axes${i}`;\n              if (value !== old.axes[i]) {\n                this.emitGamepad(allEls, `${name}moved`, Object.assign({value}, eventDetails));\n              }\n            });\n          }\n        }\n        prevGamePads.set(inputSource, data);\n      }\n      \n      if (magnetEl) {\n        magnetEl.object3D.updateWorldMatrix(true, false);\n        this.el.object3D.getWorldQuaternion(tempQuaternion_C).invert();\n\n        magnetEl.object3D.getWorldPosition(tempVector3_A);\n        for (const el of this.getMagnetTargets(magnetEl)) {\n          let magnetRange,fadeEnd,angleRange,angleEnd;\n          const magnetRangeData = el.dataset.magnetRange;\n          if (magnetRangeData) [magnetRange,fadeEnd,angleRange,angleEnd] = magnetRangeData.split(',').map(n => Number(n));\n          magnetRange = magnetRange || 0.2;\n          fadeEnd = fadeEnd === undefined ? 0.1 : fadeEnd;\n          angleRange = angleRange || 120;\n          angleEnd = angleEnd === undefined ? 80 : angleEnd;\n          const d =  el.object3D.getWorldPosition(tempVector3_B).sub(tempVector3_A).length();\n          if (d < magnetRange) {\n            const Θ = (180/Math.PI) * el.object3D.getWorldQuaternion(tempQuaternion_A).premultiply(tempQuaternion_C).angleTo(magnetEl.object3D.quaternion);\n            if (Θ < angleRange) {\n              magnetTarget = el;\n              fadeT = invlerp(magnetRange,fadeEnd,d) * invlerp(angleRange,angleEnd,Θ);\n              break;\n            }\n          }\n        }\n\n        if (fadeT > 0.2 && magnetTarget && magnetTarget.id) {\n          magnetEl.dataset.magnetTarget = magnetTarget.id;\n        } else {\n          delete magnetEl.dataset.magnetTarget;\n        }\n      }\n      \n      if (magnetTarget) {\n\n        this.el.object3D.worldToLocal(magnetTarget.object3D.getWorldPosition(tempVector3_A));\n        tempVector3_B.copy(magnetEl.object3D.position);\n        tempVector3_A.lerp(tempVector3_B, 1-fadeT).sub(tempVector3_B);\n        \n        // tempQuaternion_A is populated already when calculating if it's a close enough angle\n        // magnetTarget.object3D.getWorldQuaternion(tempQuaternion_A);\n        // tempQuaternion_A.premultiply(tempQuaternion_C);\n        tempQuaternion_B.copy(magnetEl.object3D.quaternion);\n        tempQuaternion_A.slerp(tempQuaternion_B, 1-fadeT).multiply(tempQuaternion_B.invert());\n        \n        // Move elements to match the bones but skil elements which are marked data-no-magnet\n        for (const object3D of toMagnet) {\n          object3D.position.sub(tempVector3_B);\n          object3D.position.applyQuaternion(tempQuaternion_A);\n          object3D.position.add(tempVector3_B);\n          object3D.applyQuaternion(tempQuaternion_A);\n          object3D.position.add(tempVector3_A);\n        }\n      }\n      for (const bone of bones) {\n        bone.applyMatrix4(this.el.object3D.matrixWorld);\n        bone.updateMatrixWorld();\n      }\n    }\n\n    // perform hand pose detection\n    if (toUpdate.length && this.handyWorkUpdate) {\n      this.handyWorkUpdate(\n        toUpdate,\n        referenceSpace,\n        frame,\n        function ({\n          distances, handedness\n        }) {\n          self.emitHandpose(distances[0][0], handedness, {\n            pose: distances[0][0],\n            poses: distances,\n            handedness,\n            frame\n          });\n        }\n      );\n    }\n  },\n  emitGamepad (els, name, details) {\n    details.event = name;\n    for (const el of els) {\n      el.emit(name, details, false);\n      el.emit('gamepad', details, false);\n    }\n  },\n  emitHandpose(name, handedness, details) {\n    const oldPoseName = this[handedness + '_currentPose'];\n    if (name === oldPoseName) return;\n    const els = this.elArrays[handedness];\n    \n    clearTimeout(this[handedness + '_vshortTimeout']);\n    clearTimeout(this[handedness + '_shortTimeout']);\n    clearTimeout(this[handedness + '_longTimeout']);\n\n    // This just fires cancel if it's no longer at the top but maybe be smarter?\n    if (oldPoseName) {\n      const oldPoseDetails = Object.assign({}, details);\n      oldPoseDetails.pose = oldPoseName;\n      for (const el of els) {\n        el.emit('pose_cancel_' + oldPoseName, oldPoseDetails, false);\n        el.emit('pose_end', oldPoseDetails, false);\n      }\n    }\n    \n    this[handedness + '_currentPose'] = name;\n\n    this[handedness + '_vshortTimeout'] = setTimeout(() => {\n      for (const el of els) {\n        el.emit('pose_' + name, details, false);\n        el.emit('pose', details, false);\n      }\n    }, this.data.fuseVShort);\n    \n    this[handedness + '_shortTimeout'] = setTimeout(() => {\n      for (const el of els) el.emit('pose_' + name + '_fuseShort', details, false);\n    }, this.data.fuseShort);\n    \n    this[handedness + '_longTimeout'] = setTimeout(() => { \n      for (const el of els) el.emit('pose_' + name + '_fuseLong', details, false);\n    }, this.data.fuseLong);\n  },\n  remove() {\n    if (this.bonesLeft) {\n      this.bonesLeft = null;\n      this.el.removeObject3D(\"hand-mesh-left\");\n    }\n    if (this.bonesRight) {\n      this.bonesRight = null;\n      this.el.removeObject3D(\"hand-mesh-right\");\n    }\n    if (this.el.getObject3D('controller-model-left')) this.el.removeObject3D('controller-model-left');\n    if (this.el.getObject3D('controller-model-right')) this.el.removeObject3D('controller-model-right');\n    if (this.el.getObject3D('controller-model-none')) this.el.removeObject3D('controller-model-none');\n  },\n});\n"],"names":["Constants","Handedness","Object","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","async","fetchJsonFile","path","response","fetch","ok","json","Error","statusText","fetchProfile","xrInputSource","basePath","defaultProfile","getAssetPath","supportedProfilesList","fetchProfilesList","match","profiles","some","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","layout","handedness","layouts","keys","replace","defaultComponentValues","xAxis","yAxis","button","state","VisualResponse","constructor","visualResponseDescription","this","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","normalizedXAxis","normalizedYAxis","x","y","Math","sqrt","theta","atan2","cos","sin","normalizeAxes","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","undefined","data","updateFromGamepad","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","gripSpace","targetRaySpace","component","push","Mesh","MeshBasicMaterial","Object3D","SphereGeometry","THREE","XRControllerModel","super","motionController","envMap","setEnvironmentMap","traverse","child","isMesh","material","needsUpdate","updateMatrixWorld","force","valueNode","minNode","maxNode","MotionControllerConstants","visible","quaternion","slerpQuaternions","position","lerpVectors","addAssetSceneToControllerModel","controllerModel","scene","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","findNodes","XRControllerModelFactory","gltfLoader","_assetCache","createControllerModel","controller","addEventListener","event","targetRayMode","then","gamepadMappings","name","details","entries","index","cachedAsset","clone","setPath","load","asset","catch","err","remove","DEFAULT_PROFILES_PATH","DEFAULT_HAND_PROFILE_PATH","LIB_URL","LIB","POSE_FOLDER","invlerp","a","min","max","clamp","prevGamePads","Map","changedAxes","Set","tempVector3_A","Vector3","tempVector3_B","tempQuaternion_A","Quaternion","tempQuaternion_B","tempQuaternion_C","handednesses","joints","AFRAME","registerComponent","schema","renderGamepad","oneOf","default","description","left","right","materialOverride","fuseVShort","fuseShort","fuseLong","init","sceneEl","el","webxrData","getAttribute","optionalFeaturesArray","optionalFeatures","setAttribute","loader","GLTFLoader","self","dracoLoader","systems","getDRACOLoader","meshoptDecoder","getMeshoptDecoder","controllerModelFactory","model","setDRACOLoader","ready","setMeshoptDecoder","Promise","resolve","import","update","loadPose","dumpHands","setPose","getPose","handyWorkUpdate","bind","els","Array","from","querySelectorAll","object3D","reconstructElMaps","elArrays","splice","elMaps","clear","magnetEls","magnetTargets","children","filter","dataset","none","poseName","poseElArray","get","set","magnet","xrSession","eventFactory","MutationObserver","observe","childList","changes","find","change","attributeName","attributes","subtree","getMagnetTargets","document","getElementsByClassName","src","object","reject","mesh","getObjectByProperty","frustumCulled","castShadow","receiveShadow","skeleton","pose","bones","jointName","bone","applyMatrix4","matrixWorld","setObject3D","emit","format","oldData","srcLeft","srcRight","bonesRight","gltfToJoints","bonesLeft","error","message","eventName","bindTarget","eventHandler","e","session","frame","inputSource","referenceSpace","renderer","xr","getReferenceSpace","allEls","inputSources","i","indexOf","copy","transform","orientation","getDOMAttribute","hand","call","getControllerModel","getObject3D","group","getControllerGrip","dispatchEvent","tick","toUpdate","transientSourceIndex","inputSourceLoop","inputSourceIndex","magnetEl","magnetTarget","fadeT","toMagnet","handMesh","elMap","hadAJointPose","joint","getJointPose","has","noMagnet","inputSourcePose","elShouldBeVisible","old","map","b","slice","eventDetails","emitGamepad","axesMapping","size","detail","updateWorldMatrix","getWorldQuaternion","invert","getWorldPosition","magnetRange","fadeEnd","angleRange","angleEnd","magnetRangeData","split","n","Number","d","sub","PI","premultiply","angleTo","worldToLocal","lerp","slerp","multiply","applyQuaternion","distances","emitHandpose","poses","oldPoseName","clearTimeout","oldPoseDetails","setTimeout","removeObject3D"],"mappings":"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"}