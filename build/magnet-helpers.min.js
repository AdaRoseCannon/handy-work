!function(){"use strict";AFRAME.registerComponent("linear-constraint",{schema:{axis:{type:"vec3",description:"Axis upon which the element is constrained, does not need to be normalized.",default:{x:0,y:0,z:-1}},max:{description:"How far can it travel along the axis",default:1/0},min:{description:"How far can it travel opposite to the axis",default:-1/0},step:{description:"Steps it should take from the origin.",default:0},target:{description:"Element it should try to follow",type:"selector"},part:{description:"If applied to a 3D model this is the name of the part that should be used instead.",default:""},enabled:{description:"Whether it should currently run or not",default:!0}},init(){this.tempVec3=new THREE.Vector3,this.n=new THREE.Vector3,this.el.addEventListener("object3dset",this.update.bind(this))},update(){this.n.copy(this.data.axis).normalize(),this.data.part&&(this.part=this.el.object3D.getObjectByName(this.data.part))},tick(){if(!this.data.enabled||!this.data.target)return;const t=this.data.part?this.part:this.el.object3D,e=this.data.step;if(!t)return;this.originalOffset||(this.originalOffset=(new THREE.Vector3).copy(t.position));const i=this.n,s=this.tempVec3;this.data.target.object3D.getWorldPosition(s),t.parent.worldToLocal(s),s.sub(this.originalOffset);let a=(o=s.dot(i)/i.length(),n=this.data.min,r=this.data.max,Math.min(Math.max(o,n),r));var o,n,r;e&&(a=e*Math.round(a/e)),t.position.copy(i).multiplyScalar(a).add(this.originalOffset)}}),AFRAME.registerComponent("attach-to-model",{schema:{description:"Name of part to follow",default:""},init(){this.el.parentNode.addEventListener("object3dset",this.update.bind(this))},update(){this.data&&(this.part=this.el.parentNode.object3D.getObjectByName(this.data))},tick(){if(this.part){const t=this.el.object3D.position;this.el.object3D.parent.worldToLocal(this.part.getWorldPosition(t))}}});const t=new THREE.Quaternion,e=new THREE.Vector3;AFRAME.registerComponent("grab-magnet-target",{schema:{startEvents:{type:"array",description:"Event to start grabbing"},stopEvents:{type:"array",description:"Event to stop grabbing"}},init(){this.grabStart=this.grabStart.bind(this),this.grabEnd=this.grabEnd.bind(this),this.isGrabbing=!1,this.oldParent=null,this.grabbedEl=null,this.targetEl=null,this.oldQuaternion=new THREE.Quaternion,this.oldPosition=new THREE.Quaternion},update(t){if(t.startEvents)for(const e of t.startEvents)this.el.removeEventListener(e,this.grabStart);if(t.stopEvents)for(const e of t.stopEvents)this.el.removeEventListener(e,this.grabEnd);for(const t of this.data.startEvents)this.el.addEventListener(t,this.grabStart);for(const t of this.data.stopEvents)this.el.addEventListener(t,this.grabEnd)},grabStart(i){const s=this.el.dataset.magnetTarget;if(!1===this.isGrabbing&&s){const a=this.el.dataset.magnet.split(" "),o=document.getElementById(s),n=o.dataset.pickUp,r="parent"===n?o.parentNode:o;if(this.isGrabbing=!0,this.grabbedEl=r,this.targetEl=o,this.removedClasses=[],void 0!==n){for(const t of a)r.classList.contains(t)&&(r.classList.remove(t),this.removedClasses.push(t));const s=r.dataset.oldGrabber;s&&document.getElementById(s).components["grab-magnet-target"].grabEnd(i),r.dataset.oldGrabber=this.el.id,this.oldParent=r.parentNode,this.el.add(r),this.oldQuaternion.copy(r.object3D.quaternion),r.object3D.quaternion.identity(),this.oldPosition.copy(r.object3D.position),r.object3D.position.set(0,0,0),"parent"===n&&(t.copy(o.object3D.quaternion).invert(),e.copy(o.object3D.position).applyQuaternion(t),r.object3D.applyQuaternion(t),r.object3D.position.sub(e)),r.emit("pickup",Object.assign({by:this.el},i&&i.detail))}r.emit("grabbed",Object.assign({by:this.el},i&&i.detail))}},grabEnd(e){if(this.isGrabbing){const i=this.grabbedEl;if(this.oldParent){for(const t of this.removedClasses.splice(0))i.classList.add(t);delete i.dataset.oldGrabber,void 0!==i.dataset.resetTransform?(i.object3D.quaternion.copy(this.oldQuaternion),i.object3D.position.copy(this.oldPosition)):(this.oldParent.object3D.worldToLocal(i.object3D.getWorldPosition(i.object3D.position)),this.oldParent.object3D.getWorldQuaternion(t).invert(),i.object3D.getWorldQuaternion(i.object3D.quaternion).premultiply(t)),this.oldParent.add(i),this.oldParent=null,i.emit("putdown",Object.assign({by:this.el},e&&e.detail))}this.isGrabbing=!1,this.grabbedEl=null,this.targetEl=null,i.emit("released",Object.assign({by:this.el},e&&e.detail))}},tick(){this.isGrabbing&&void 0===this.targetEl.dataset.pickUp&&this.el.dataset.magnetTarget!==this.targetEl.id&&this.grabEnd()}})}();
//# sourceMappingURL=magnet-helpers.min.js.map
