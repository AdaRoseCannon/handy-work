!function(){"use strict";const e={Handedness:Object.freeze({NONE:"none",LEFT:"left",RIGHT:"right"}),ComponentState:Object.freeze({DEFAULT:"default",TOUCHED:"touched",PRESSED:"pressed"}),ComponentProperty:Object.freeze({BUTTON:"button",X_AXIS:"xAxis",Y_AXIS:"yAxis",STATE:"state"}),ComponentType:Object.freeze({TRIGGER:"trigger",SQUEEZE:"squeeze",TOUCHPAD:"touchpad",THUMBSTICK:"thumbstick",BUTTON:"button"}),ButtonTouchThreshold:.05,AxisTouchThreshold:.1,VisualResponseProperty:Object.freeze({TRANSFORM:"transform",VISIBILITY:"visibility"})};async function t(e){const t=await fetch(e);if(t.ok)return t.json();throw new Error(t.statusText)}async function s(e,s,o=null,n=!0){if(!e)throw new Error("No xrInputSource supplied");if(!s)throw new Error("No basePath supplied");const a=await async function(e){if(!e)throw new Error("No basePath supplied");return await t(`${e}/profilesList.json`)}(s);let i;if(e.profiles.some((e=>{const t=a[e];return t&&(i={profileId:e,profilePath:`${s}/${t.path}`,deprecated:!!t.deprecated}),!!i})),!i){if(!o)throw new Error("No matching profile name found");const e=a[o];if(!e)throw new Error(`No matching profile name found and default profile "${o}" missing.`);i={profileId:o,profilePath:`${s}/${e.path}`,deprecated:!!e.deprecated}}const r=await t(i.profilePath);let l;if(n){let t;if(t="any"===e.handedness?r.layouts[Object.keys(r.layouts)[0]]:r.layouts[e.handedness],!t)throw new Error(`No matching handedness, ${e.handedness}, in profile ${i.profileId}`);t.assetPath&&(l=i.profilePath.replace("profile.json",t.assetPath))}return{profile:r,assetPath:l}}const o={xAxis:0,yAxis:0,button:0,state:e.ComponentState.DEFAULT};class n{constructor(t){this.componentProperty=t.componentProperty,this.states=t.states,this.valueNodeName=t.valueNodeName,this.valueNodeProperty=t.valueNodeProperty,this.valueNodeProperty===e.VisualResponseProperty.TRANSFORM&&(this.minNodeName=t.minNodeName,this.maxNodeName=t.maxNodeName),this.value=0,this.updateFromComponent(o)}updateFromComponent({xAxis:t,yAxis:s,button:o,state:n}){const{normalizedXAxis:a,normalizedYAxis:i}=function(e=0,t=0){let s=e,o=t;if(Math.sqrt(e*e+t*t)>1){const n=Math.atan2(t,e);s=Math.cos(n),o=Math.sin(n)}return{normalizedXAxis:.5*s+.5,normalizedYAxis:.5*o+.5}}(t,s);switch(this.componentProperty){case e.ComponentProperty.X_AXIS:this.value=this.states.includes(n)?a:.5;break;case e.ComponentProperty.Y_AXIS:this.value=this.states.includes(n)?i:.5;break;case e.ComponentProperty.BUTTON:this.value=this.states.includes(n)?o:0;break;case e.ComponentProperty.STATE:this.valueNodeProperty===e.VisualResponseProperty.VISIBILITY?this.value=this.states.includes(n):this.value=this.states.includes(n)?1:0;break;default:throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`)}}}class a{constructor(t,s){if(!(t&&s&&s.visualResponses&&s.gamepadIndices&&0!==Object.keys(s.gamepadIndices).length))throw new Error("Invalid arguments supplied");this.id=t,this.type=s.type,this.rootNodeName=s.rootNodeName,this.touchPointNodeName=s.touchPointNodeName,this.visualResponses={},Object.keys(s.visualResponses).forEach((e=>{const t=new n(s.visualResponses[e]);this.visualResponses[e]=t})),this.gamepadIndices=Object.assign({},s.gamepadIndices),this.values={state:e.ComponentState.DEFAULT,button:void 0!==this.gamepadIndices.button?0:void 0,xAxis:void 0!==this.gamepadIndices.xAxis?0:void 0,yAxis:void 0!==this.gamepadIndices.yAxis?0:void 0}}get data(){return{id:this.id,...this.values}}updateFromGamepad(t){if(this.values.state=e.ComponentState.DEFAULT,void 0!==this.gamepadIndices.button&&t.buttons.length>this.gamepadIndices.button){const s=t.buttons[this.gamepadIndices.button];this.values.button=s.value,this.values.button=this.values.button<0?0:this.values.button,this.values.button=this.values.button>1?1:this.values.button,s.pressed||1===this.values.button?this.values.state=e.ComponentState.PRESSED:(s.touched||this.values.button>e.ButtonTouchThreshold)&&(this.values.state=e.ComponentState.TOUCHED)}void 0!==this.gamepadIndices.xAxis&&t.axes.length>this.gamepadIndices.xAxis&&(this.values.xAxis=t.axes[this.gamepadIndices.xAxis],this.values.xAxis=this.values.xAxis<-1?-1:this.values.xAxis,this.values.xAxis=this.values.xAxis>1?1:this.values.xAxis,this.values.state===e.ComponentState.DEFAULT&&Math.abs(this.values.xAxis)>e.AxisTouchThreshold&&(this.values.state=e.ComponentState.TOUCHED)),void 0!==this.gamepadIndices.yAxis&&t.axes.length>this.gamepadIndices.yAxis&&(this.values.yAxis=t.axes[this.gamepadIndices.yAxis],this.values.yAxis=this.values.yAxis<-1?-1:this.values.yAxis,this.values.yAxis=this.values.yAxis>1?1:this.values.yAxis,this.values.state===e.ComponentState.DEFAULT&&Math.abs(this.values.yAxis)>e.AxisTouchThreshold&&(this.values.state=e.ComponentState.TOUCHED)),Object.values(this.visualResponses).forEach((e=>{e.updateFromComponent(this.values)}))}}class i{constructor(e,t,s){if(!e)throw new Error("No xrInputSource supplied");if(!t)throw new Error("No profile supplied");this.xrInputSource=e,this.assetUrl=s,this.id=t.profileId,this.layoutDescription=t.layouts[e.handedness],this.components={},Object.keys(this.layoutDescription.components).forEach((e=>{const t=this.layoutDescription.components[e];this.components[e]=new a(e,t)})),this.updateFromGamepad()}get gripSpace(){return this.xrInputSource.gripSpace}get targetRaySpace(){return this.xrInputSource.targetRaySpace}get data(){const e=[];return Object.values(this.components).forEach((t=>{e.push(t.data)})),e}updateFromGamepad(){Object.values(this.components).forEach((e=>{e.updateFromGamepad(this.xrInputSource.gamepad)}))}}const{Mesh:r,MeshBasicMaterial:l,Object3D:d,SphereGeometry:h}=THREE;class c extends d{constructor(){super(),this.motionController=null,this.envMap=null}setEnvironmentMap(e){return this.envMap==e||(this.envMap=e,this.traverse((e=>{e.isMesh&&(e.material.envMap=this.envMap,e.material.needsUpdate=!0)}))),this}updateMatrixWorld(t){super.updateMatrixWorld(t),this.motionController&&(this.motionController.updateFromGamepad(),Object.values(this.motionController.components).forEach((t=>{Object.values(t.visualResponses).forEach((t=>{const{valueNode:s,minNode:o,maxNode:n,value:a,valueNodeProperty:i}=t;s&&(i===e.VisualResponseProperty.VISIBILITY?s.visible=a:i===e.VisualResponseProperty.TRANSFORM&&(s.quaternion.slerpQuaternions(o.quaternion,n.quaternion,a),s.position.lerpVectors(o.position,n.position,a)))}))})))}}function p(t,s){!function(t,s){Object.values(t.components).forEach((t=>{const{type:o,touchPointNodeName:n,visualResponses:a}=t;if(o===e.ComponentType.TOUCHPAD&&(t.touchPointNode=s.getObjectByName(n),t.touchPointNode)){const e=new h(.001),s=new l({color:255}),o=new r(e,s);t.touchPointNode.add(o)}Object.values(a).forEach((t=>{const{valueNodeName:o,minNodeName:n,maxNodeName:a,valueNodeProperty:i}=t;if(i===e.VisualResponseProperty.TRANSFORM){if(t.minNode=s.getObjectByName(n),t.maxNode=s.getObjectByName(a),!t.minNode)return;if(!t.maxNode)return}t.valueNode=s.getObjectByName(o),t.valueNode}))}))}(t.motionController,s),t.envMap&&s.traverse((e=>{e.isMesh&&(e.material.envMap=t.envMap,e.material.needsUpdate=!0)})),t.add(s)}class u{constructor(e,t=null){this.gltfLoader=e,this.path="https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles",this._assetCache={},this.onLoad=t}setPath(e){return this.path=e,this}createControllerModel(e){const t=new c;let o=null;return e.addEventListener("connected",(e=>{const n=e.data;"tracked-pointer"===n.targetRayMode&&n.gamepad&&!n.hand&&s(n,this.path,"generic-trigger").then((({profile:e,assetPath:s})=>{t.motionController=new i(n,e,s);const a=[],r=[],l={buttons:a,axes:r};if(t.gamepadMappings=l,t.motionController.layoutDescription?.components)for(let[e,s]of Object.entries(t.motionController.layoutDescription.components)){e=e.replace("xr-standard-","");for(const[t,o]of Object.entries(s.gamepadIndices))"button"===t?a[o]=e:r[o]={name:e,type:t}}const d=this._assetCache[t.motionController.assetUrl];if(d)o=d.scene.clone(),p(t,o),this.onLoad&&this.onLoad(o);else{if(!this.gltfLoader)throw new Error("GLTFLoader not set.");this.gltfLoader.setPath(""),this.gltfLoader.load(t.motionController.assetUrl,(e=>{this._assetCache[t.motionController.assetUrl]=e,o=e.scene.clone(),p(t,o),this.onLoad&&this.onLoad(o)}),null,(()=>{throw new Error(`Asset ${t.motionController.assetUrl} missing or malformed.`)}))}})).catch((e=>{}))})),e.addEventListener("disconnected",(()=>{t.motionController=null,t.remove(o),o=null})),t}}const m="https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles",f=m+"/generic-hand",g="https://cdn.jsdelivr.net/npm/handy-work@3.1.11",b=g+"/build/esm/handy-work.standalone.js",v=g+"/poses/",y=(e,t,s)=>((e,t=0,s=1)=>Math.min(s,Math.max(t,e)))((s-e)/(t-e)),x=new Map,E=new Set,T=new THREE.Vector3,j=new THREE.Vector3,N=new THREE.Quaternion,A=new THREE.Quaternion,M=new THREE.Quaternion,w=["left","right","none"],D=["wrist","thumb-metacarpal","thumb-phalanx-proximal","thumb-phalanx-distal","thumb-tip","index-finger-metacarpal","index-finger-phalanx-proximal","index-finger-phalanx-intermediate","index-finger-phalanx-distal","index-finger-tip","middle-finger-metacarpal","middle-finger-phalanx-proximal","middle-finger-phalanx-intermediate","middle-finger-phalanx-distal","middle-finger-tip","ring-finger-metacarpal","ring-finger-phalanx-proximal","ring-finger-phalanx-intermediate","ring-finger-phalanx-distal","ring-finger-tip","pinky-finger-metacarpal","pinky-finger-phalanx-proximal","pinky-finger-phalanx-intermediate","pinky-finger-phalanx-distal","pinky-finger-tip"];AFRAME.registerComponent("handy-controls",{schema:{renderGamepad:{oneOf:["any","left","right","none","never"],default:"any",description:"Whether to render a gamepad model when it's not doing hand tracking, right, none and left are the names of controller handedness, any is all of them, and never is to not draw gamepads"},left:{description:"URL for left controller",type:"model",default:f+"/left.glb"},right:{description:"URL for right controller",type:"model",default:f+"/right.glb"},materialOverride:{description:"Which hand to use the `material` component for",oneOf:["both","left","right","neither"],default:"both"},fuseVShort:{description:"Time for a pose to trigger a pose event (ms)",default:48},fuseShort:{description:"Time for a pose to trigger a pose_fuseShort event (ms)",default:480},fuseLong:{description:"Time for a pose to trigger a pose_fuseLong event (ms)",default:1440}},init(){const e=this.el.sceneEl,t=this.el.sceneEl.getAttribute("webxr"),s=t.optionalFeatures;s.includes("hand-tracking")||(s.push("hand-tracking"),this.el.sceneEl.setAttribute("webxr",t)),this.loader=new THREE.GLTFLoader;const o=this,n=this.el.sceneEl.systems["gltf-model"].getDRACOLoader(),a=this.el.sceneEl.systems["gltf-model"].getMeshoptDecoder();this.controllerModelFactory=new u(this.loader),this.controllerModelFactory.setPath(m),this.model=null,n&&this.loader.setDRACOLoader(n),this.ready=a?a.then((function(e){o.loader.setMeshoptDecoder(e)})):Promise.resolve(),import(b).then(function({update:e,loadPose:t,dumpHands:s,setPose:o,getPose:n}){this.handyWorkUpdate=e,this.dumpHands=s,this.loadPose=t,this.setPose=o,this.getPose=n,t("relax",v+"relax.handpose"),t("fist",v+"fist.handpose"),t("flat",v+"flat.handpose"),t("point",v+"point.handpose"),t("horns",v+"horns.handpose"),t("shaka",v+"shaka.handpose"),t("vulcan",v+"vulcan.handpose")}.bind(this));for(const e of w){const t=Array.from(this.el.querySelectorAll(`[data-${e}]`));for(const e of t)e.object3D.visible=!1}function i(){for(const e of w)o.elArrays[e].splice(0),o.elMaps[e].clear(),o.magnetEls.clear(),o.magnetTargets.clear();const e=Array.from(o.el.children).filter((e=>e.dataset.left||e.dataset.right||e.dataset.none));for(const t of e)for(const e of w)if(void 0!==t.dataset[e]){o.elArrays[e].push(t);const s=t.dataset[e],n=o.elMaps[e].get(s)||[];n.push(t),o.elMaps[e].set(s,n),t.dataset.magnet&&(o.magnetEls.set(e,t),o.magnetTargets.set(t,null))}}e.addEventListener("enter-vr",(()=>{for(const t of["select","selectstart","selectend","squeeze","squeezeend","squeezestart"])e.xrSession.addEventListener(t,this.eventFactory(t,this))})),this.elArrays={left:[],right:[],none:[]},this.elMaps={left:new Map,right:new Map,none:new Map},this.magnetEls=new Map,this.magnetTargets=new Map,i(),new MutationObserver(i).observe(this.el,{childList:!0}),new MutationObserver((function(e){e.find((e=>"data-none"===e.attributeName||"data-left"===e.attributeName||"data-right"===e.attributeName||"data-magnet"===e.attributeName))&&i()})).observe(this.el,{attributes:!0,subtree:!0})},getMagnetTargets(e){const t=this.magnetTargets.get(e);if(null===t){const t=document.getElementsByClassName(e.dataset.magnet);return this.magnetTargets.set(e,t),t}return t},async gltfToJoints(e,t){const s=this.el;await this.ready;const o=(await new Promise(function(t,s){this.loader.load(e,t,void 0,s)}.bind(this))).scene.children[0],n=o.getObjectByProperty("type","SkinnedMesh");this.el.components.material&&("both"!==this.data.materialOverride&&this.data.materialOverride!==t||(n.material=this.el.components.material.material)),n.visible=!1,n.frustumCulled=!1,n.castShadow=!0,n.receiveShadow=!0,n.skeleton.pose();const a=[];for(const e of D){const t=o.getObjectByName(e);void 0!==t?(t.jointName=e,a.push(t),t.applyMatrix4(this.el.object3D.matrixWorld),t.updateMatrixWorld()):a.push(void 0)}return s.setObject3D("hand-mesh-"+t,n),s.emit("model-loaded",{format:"gltf",model:n}),a},async update(e){const t=this.el,s=this.data.left,o=this.data.right;if(e.left===this.data.left&&e.right===this.data.right&&e.renderGamepad===this.data.renderGamepad||this.remove(),e.left!==this.data.left||e.right!==this.data.right)try{this.bonesRight=await this.gltfToJoints(o,"right"),this.bonesLeft=await this.gltfToJoints(s,"left")}catch(e){const s=e&&e.message?e.message:"Failed to load glTF model";t.emit("hand-model-error",{message:s})}},eventFactory(e,t,s){function o(t){const s=this.el.sceneEl.xrSession,o=t.frame,n=t.inputSource,a=this.el.sceneEl.renderer.xr.getReferenceSpace(),i=o.getPose(n.targetRaySpace,a),r=t.inputSource.handedness,l={inputSource:n,handedness:r,frame:o};if(!i)return;const d=this.elArrays[r];if("screen"===n.targetRayMode){const t=`screen-${Array.from(s.inputSources).filter((e=>"screen"===e.targetRayMode)).indexOf(n)}`;for(const s of d)s.dataset[r]===t&&(s.object3D.position.copy(i.transform.position),s.object3D.quaternion.copy(i.transform.orientation),s.object3D.visible=!1!==s.getDOMAttribute("visible"),s.emit(e,l))}else if(n.gamepad||n.hand)for(const t of d)t.emit(e,l)}return s?o.call(t,s):o.bind(t)},createControllerModel(e,t){const s=this.el.sceneEl.renderer.xr.getControllerGrip(e),o=this.controllerModelFactory.createControllerModel(s);return s.addEventListener("connected",(e=>{const t=e.data;o.userData.handedness=t.handedness})),s.addEventListener("disconnected",(()=>{o.userData.handedness="unknown"})),s.dispatchEvent({type:"connected",data:t}),this.el.setObject3D("controller-model-"+e,o),o},getControllerModel(e){const t=this.el.getObject3D("controller-model-0")||this.createControllerModel(0,e);if(t.userData.handedness===e.handedness)return t;const s=this.el.getObject3D("controller-model-1")||this.createControllerModel(1,e);return s.userData.handedness===e.handedness?s:null},tick(){const e=this,t=this.el.sceneEl.xrSession;if(!t)return;const s=this.el.sceneEl.renderer.xr.getReferenceSpace(),o=[],n=this.el.sceneEl.frame;if(!n)return;let a=0;e:for(const e of t.inputSources){const t=this.magnetEls.get(e.handedness);let i=null,r=1,l=[];const d=[];let h;const c=this.elArrays[e.handedness],p=this.elMaps[e.handedness];if(h=this.el.getObject3D("hand-mesh-"+e.handedness),e.hand){if(o.push(e),l="right"===e.handedness&&this.bonesRight||"left"===e.handedness&&this.bonesLeft,!l.length)continue;let t=!1;for(const o of l){const a=e.hand.get(o.jointName);if(d.push(o),a){const e=n.getJointPose(a,s);if(!e)continue e;if(t=!0,p.has(o.jointName)){if(!1===h.visible)for(const e of p.get(o.jointName))e.object3D.visible=!1!==e.getDOMAttribute("visible");for(const t of p.get(o.jointName))t.object3D.position.copy(e.transform.position),t.object3D.quaternion.copy(e.transform.orientation),void 0===t.dataset.noMagnet&&d.push(t.object3D)}o.position.copy(e.transform.position),o.quaternion.copy(e.transform.orientation)}}t&&(h.visible=!0)}else if(h){h.visible=!1;for(const e of c)e.object3D.visible=!1}if("screen"!==e.targetRayMode){for(const[t,o]of[["ray",e.targetRaySpace],["grip",e.gripSpace]])if(p.has(t)&&o){const e=n.getPose(o,s);if(e)for(const s of p.get(t)){s.object3D.position.copy(e.transform.position),s.object3D.quaternion.copy(e.transform.orientation);const t=!1!==s.getDOMAttribute("visible");s.object3D.visible=t,void 0===s.dataset.noMagnet&&d.push(s.object3D)}}if(("any"===this.data.renderGamepad||this.data.renderGamepad===e.handedness)&&e.gamepad&&!e.hand){const t=this.getControllerModel(e);if(t){if(e.gripSpace){const o=n.getPose(e.gripSpace,s);o&&(t.position.copy(o.transform.position),t.quaternion.copy(o.transform.orientation),d.push(t))}const o=x.get(e),a={buttons:e.gamepad.buttons.map((e=>e.value)),axes:e.gamepad.axes.slice(0)};if(o){const s={handedness:e.handedness,inputSource:e,data:a,frame:n};a.buttons.forEach(((e,n)=>{if(e!==o.buttons[n]){let o=t.gamepadMappings?.buttons[n]||`button${n}`;1===e?this.emitGamepad(c,`${o}down`,Object.assign({value:e},s)):this.emitGamepad(c,`${o}up`,Object.assign({value:e},s))}}));const i=t.gamepadMappings?.axes;if(i&&i.length){E.clear();const e={};if(i.forEach((({name:e},t)=>{if(e){a.axes[t]!==o.axes[t]&&E.add(e)}})),E.size){i.forEach((({name:t,type:s},o)=>{if(t&&E.has(t)){const n=a.axes[o];e[t]=e[t]||{},e[t][s.slice(0,1)]=n}}));for(const[t,o]of Object.entries(e))this.emitGamepad(c,`${t}moved`,Object.assign(o,s))}}else a.axes.forEach(((e,n)=>{let a=t.gamepadMappings?.axes[n]||`axes${n}`;e!==o.axes[n]&&this.emitGamepad(c,`${a}moved`,Object.assign({value:e},s))}))}x.set(e,a)}}if(t){t.object3D.updateWorldMatrix(!0,!1),this.el.object3D.getWorldQuaternion(M).invert(),t.object3D.getWorldPosition(T);for(const e of this.getMagnetTargets(t)){let s,o,n,a;const l=e.dataset.magnetRange;l&&([s,o,n,a]=l.split(",").map((e=>Number(e)))),s=s||.2,o=void 0===o?.1:o,n=n||120,a=void 0===a?80:a;const d=e.object3D.getWorldPosition(j).sub(T).length();if(d<s){const l=180/Math.PI*e.object3D.getWorldQuaternion(N).premultiply(M).angleTo(t.object3D.quaternion);if(l<n){i=e,r=y(s,o,d)*y(n,a,l);break}}}r>.2&&i&&i.id?t.dataset.magnetTarget=i.id:delete t.dataset.magnetTarget}if(i){this.el.object3D.worldToLocal(i.object3D.getWorldPosition(T)),j.copy(t.object3D.position),T.lerp(j,1-r).sub(j),A.copy(t.object3D.quaternion),N.slerp(A,1-r).multiply(A.invert());for(const e of d)e.position.sub(j),e.position.applyQuaternion(N),e.position.add(j),e.applyQuaternion(N),e.position.add(T)}for(const e of l)e.applyMatrix4(this.el.object3D.matrixWorld),e.updateMatrixWorld()}else{const t="screen-"+a++;if(p.has(t)){const o=n.getPose(e.targetRaySpace,s);if(!o)continue e;for(const e of p.get(t))e.object3D.position.copy(o.transform.position),e.object3D.quaternion.copy(o.transform.orientation),e.object3D.visible=!1!==e.getDOMAttribute("visible")}}}o.length&&this.handyWorkUpdate&&this.handyWorkUpdate(o,s,n,(function({distances:t,handedness:s}){e.emitHandpose(t[0][0],s,{pose:t[0][0],poses:t,handedness:s,frame:n})}))},emitGamepad(e,t,s){s.event=t;for(const o of e)o.emit(t,s,!1),o.emit("gamepad",s,!1)},emitHandpose(e,t,s){const o=this[t+"_currentPose"];if(e===o)return;const n=this.elArrays[t];if(clearTimeout(this[t+"_vshortTimeout"]),clearTimeout(this[t+"_shortTimeout"]),clearTimeout(this[t+"_longTimeout"]),o){const e=Object.assign({},s);e.pose=o;for(const t of n)t.emit("pose_cancel_"+o,e,!1),t.emit("pose_end",e,!1)}this[t+"_currentPose"]=e,this[t+"_vshortTimeout"]=setTimeout((()=>{for(const t of n)t.emit("pose_"+e,s,!1),t.emit("pose",s,!1)}),this.data.fuseVShort),this[t+"_shortTimeout"]=setTimeout((()=>{for(const t of n)t.emit("pose_"+e+"_fuseShort",s,!1)}),this.data.fuseShort),this[t+"_longTimeout"]=setTimeout((()=>{for(const t of n)t.emit("pose_"+e+"_fuseLong",s,!1)}),this.data.fuseLong)},remove(){this.bonesLeft&&(this.bonesLeft=null,this.el.removeObject3D("hand-mesh-left")),this.bonesRight&&(this.bonesRight=null,this.el.removeObject3D("hand-mesh-right")),this.el.getObject3D("controller-model-0")&&this.el.removeObject3D("controller-model-0"),this.el.getObject3D("controller-model-1")&&this.el.removeObject3D("controller-model-1")}})}();
//# sourceMappingURL=handy-controls.min.js.map
