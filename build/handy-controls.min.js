!function(){"use strict";const t="https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/",e="https://cdn.jsdelivr.net/npm/handy-work@1.4.5",o=e+"/poses/",i=(t,e,o)=>((t,e=0,o=1)=>Math.min(o,Math.max(e,t)))((o-t)/(e-t)),n=["wrist","thumb-metacarpal","thumb-phalanx-proximal","thumb-phalanx-distal","thumb-tip","index-finger-metacarpal","index-finger-phalanx-proximal","index-finger-phalanx-intermediate","index-finger-phalanx-distal","index-finger-tip","middle-finger-metacarpal","middle-finger-phalanx-proximal","middle-finger-phalanx-intermediate","middle-finger-phalanx-distal","middle-finger-tip","ring-finger-metacarpal","ring-finger-phalanx-proximal","ring-finger-phalanx-intermediate","ring-finger-phalanx-distal","ring-finger-tip","pinky-finger-metacarpal","pinky-finger-phalanx-proximal","pinky-finger-phalanx-intermediate","pinky-finger-phalanx-distal","pinky-finger-tip"];AFRAME.registerComponent("handy-controls",{schema:{left:{description:"URL for left controller",type:"model",default:t+"left.glb"},right:{description:"URL for right controller",type:"model",default:t+"right.glb"},materialOverride:{description:"Which hand to use the `material` component for",oneOf:["both","left","right","none"],default:"both"},fuseVShort:{description:"Time for a pose to trigger a pose event (ms)",default:48},fuseShort:{description:"Time for a pose to trigger a pose_fuseShort event (ms)",default:480},fuseLong:{description:"Time for a pose to trigger a pose_fuseLong event (ms)",default:1440}},init(){this.handyWorkCallback=this.handyWorkCallback.bind(this);const t=this.el.sceneEl.getAttribute("webxr"),e=t.optionalFeatures;e.includes("hand-tracking")||(e.push("hand-tracking"),this.el.sceneEl.setAttribute("webxr",t));const i=this,n=this.el.sceneEl.systems["gltf-model"].getDRACOLoader(),s=this.el.sceneEl.systems["gltf-model"].getMeshoptDecoder();this.model=null,this.loader=new THREE.GLTFLoader,n&&this.loader.setDRACOLoader(n),this.ready=s?s.then((function(t){i.loader.setMeshoptDecoder(t)})):Promise.resolve(),import("https://cdn.jsdelivr.net/npm/handy-work@1.4.5/build/esm/handy-work.standalone.js").then(function({update:t,loadPose:e,dumpHands:i,setPose:n,getPose:s}){this.handyWorkUpdate=t,this.dumpHands=i,this.loadPose=e,this.setPose=n,this.getPose=s,e("relax",o+"relax.handpose"),e("fist",o+"fist.handpose"),e("flat",o+"flat.handpose"),e("point",o+"point.handpose"),e("horns",o+"horns.handpose"),e("shaka",o+"shaka.handpose"),e("vulcan",o+"vulcan.handpose")}.bind(this));for(const t of["left","right"]){const e=Array.from(this.el.querySelectorAll(`[data-${t}]`));for(const t of e)t.object3D.visible=!1}this.gripOffset={right:new THREE.Vector3(-.005,-.03,0),left:new THREE.Vector3(.005,-.03,0)},this.gripQuaternions={right:[(new THREE.Quaternion).setFromUnitVectors(new THREE.Vector3(0,0,-1),new THREE.Vector3(-1,0,0).normalize()),(new THREE.Quaternion).setFromUnitVectors(new THREE.Vector3(0,1,0),new THREE.Vector3(-1,0,0))],left:[(new THREE.Quaternion).setFromUnitVectors(new THREE.Vector3(0,0,1),new THREE.Vector3(1,0,0).normalize()),(new THREE.Quaternion).setFromUnitVectors(new THREE.Vector3(1,1,0),new THREE.Vector3(-1,0,-1))]},this.tempVector3=new THREE.Vector3,this.tempVector3_A=new THREE.Vector3,this.tempVector3_B=new THREE.Vector3,this.tempQuaternion_A=new THREE.Quaternion,this.tempQuaternion_B=new THREE.Quaternion},async gltfToJoints(t,e){const o=this.el;await this.ready;const i=(await new Promise(function(e,o){this.loader.load(t,e,void 0,o)}.bind(this))).scene.children[0],s=i.getObjectByProperty("type","SkinnedMesh");this.el.components.material&&("both"!==this.data.materialOverride&&this.data.materialOverride!==e||(s.material=this.el.components.material.material)),s.visible=!1,s.frustumCulled=!1,s.castShadow=!0,s.receiveShadow=!0,s.skeleton.pose();const r=[];for(const e of n){const o=i.getObjectByName(e);void 0!==o?(o.jointName=e,r.push(o),o.applyMatrix4(this.el.object3D.matrixWorld),o.updateMatrixWorld()):(console.warn(`Couldn't find ${e} in ${t} hand mesh`),r.push(void 0))}return o.setObject3D("hand-mesh-"+e,s),o.emit("model-loaded",{format:"gltf",model:s}),r},async update(){const t=this.el,e=this.data.left,o=this.data.right;this.remove();try{this.bonesRight=await this.gltfToJoints(o,"right"),this.bonesLeft=await this.gltfToJoints(e,"left")}catch(e){const o=e&&e.message?e.message:"Failed to load glTF model";console.warn(o),t.emit("hand-model-error",{message:o})}},tick(){const t=this.el.sceneEl.xrSession;if(!t)return;const e=this.el.sceneEl.renderer.xr.getReferenceSpace(),o=[],n=this.el.sceneEl.frame;t:for(const s of t.inputSources){const t=this.el.getObject3D("hand-mesh-"+s.handedness);if(!t)return;const r=Array.from(this.el.querySelectorAll(`[data-${s.handedness}]`)),a=new Map;for(const t of r){const e=t.dataset[s.handedness],o=a.get(e)||[];o.push(t),a.set(e,o)}if(!s.hand){for(const t of r)t.object3D.visible=!1;t.visible=!1;continue}o.push(s);const l="right"===s.handedness&&this.bonesRight||"left"===s.handedness&&this.bonesLeft;if(!l)continue;for(const o of l){const i=s.hand.get(o.jointName);if(i){const r=n.getJointPose(i,e);if(!r)continue t;if(t.visible=!0,a.has(o.jointName))for(const t of a.get(o.jointName))t.object3D.position.copy(r.transform.position),t.object3D.quaternion.copy(r.transform.orientation),t.object3D.visible=!1!==t.getDOMAttribute("visible");if("middle-finger-metacarpal"===o.jointName&&a.has("grip"))for(const t of a.get("grip"))t.object3D.quaternion.copy(r.transform.orientation),this.gripQuaternions[s.handedness].forEach((e=>t.object3D.quaternion.multiply(e))),t.object3D.position.copy(this.gripOffset[s.handedness]),t.object3D.position.applyQuaternion(t.object3D.quaternion),t.object3D.position.add(r.transform.position),t.object3D.visible=!1!==t.getDOMAttribute("visible");o.position.copy(r.transform.position),o.quaternion.copy(r.transform.orientation)}}if(a.has("ray")&&s.targetRaySpace){const t=n.getPose(s.targetRaySpace,e);if(t)for(const e of a.get("ray"))e.object3D.position.copy(t.transform.position),e.object3D.quaternion.copy(t.transform.orientation),e.object3D.visible=!1!==e.getDOMAttribute("visible")}let h=this.el.querySelector(`[data-magnet][data-${s.handedness}]`),c=null,d=1;if(h){h.object3D.updateWorldMatrix(!0,!1);const t=Array.from(document.querySelectorAll(h.dataset.magnet));for(const e of t){const[t,o]=(e.dataset.magnetRange||"0.2,0.1").split(",").map((t=>Number(t)));e.object3D.getWorldPosition(this.tempVector3),h.object3D.worldToLocal(this.tempVector3);const n=this.tempVector3.length();if(n<t){c=e,d=o?i(t,o,n):1;break}}}if(c){c.object3D.getWorldPosition(this.tempVector3_A),h.object3D.getWorldPosition(this.tempVector3_B),this.tempVector3_A.lerp(this.tempVector3_B,1-d).sub(this.tempVector3_B),c.object3D.getWorldQuaternion(this.tempQuaternion_A),h.object3D.getWorldQuaternion(this.tempQuaternion_B),this.tempQuaternion_A.slerp(this.tempQuaternion_B,1-d).multiply(this.tempQuaternion_B.invert());for(const t of l)t.position.sub(h.object3D.position),t.position.applyQuaternion(this.tempQuaternion_A),t.position.add(h.object3D.position),t.applyQuaternion(this.tempQuaternion_A),t.position.add(this.tempVector3_A),t.applyMatrix4(this.el.object3D.matrixWorld),t.updateMatrixWorld();for(const t of r)t.object3D.position.sub(h.object3D.position),t.object3D.position.applyQuaternion(this.tempQuaternion_A),t.object3D.position.add(h.object3D.position),t.object3D.applyQuaternion(this.tempQuaternion_A),t.object3D.position.add(this.tempVector3_A)}else for(const t of l)t.applyMatrix4(this.el.object3D.matrixWorld),t.updateMatrixWorld()}o.length&&this.handyWorkUpdate&&this.handyWorkUpdate(o,e,n,this.handyWorkCallback)},handyWorkCallback:function({distances:t,handedness:e}){this.emit(t[0][0],e,{pose:t[0][0],poses:t,handedness:e})},emit(t,e,o){if(t===this[e+"_currentPose"])return;const i=Array.from(this.el.querySelectorAll(`[data-${e}]`));clearTimeout(this[e+"_vshortTimeout"]),clearTimeout(this[e+"_shortTimeout"]),clearTimeout(this[e+"_longTimeout"]),this[e+"_currentPose"]=t,this[e+"_vshortTimeout"]=setTimeout((()=>{this.el.emit("pose_"+t,o),this.el.emit("pose",o);for(const e of i)e.emit("pose_"+t,o,!1),e.emit("pose",o,!1)}),this.data.fuseVShort),this[e+"_shortTimeout"]=setTimeout((()=>{this.el.emit("pose_"+t+"_fuseShort",o);for(const e of i)e.emit("pose_"+t+"_fuseShort",o,!1)}),this.data.fuseShort),this[e+"_longTimeout"]=setTimeout((()=>{this.el.emit("pose_"+t+"_fuseLong",o);for(const e of i)e.emit("pose_"+t+"_fuseLong",o,!1)}),this.data.fuseLong)},remove(){this.bonesLeft&&(this.bonesLeft=null,this.el.removeObject3D("hand-mesh-left")),this.bonesRight&&(this.bonesRight=null,this.el.removeObject3D("hand-mesh-right"))}})}();
//# sourceMappingURL=handy-controls.min.js.map
