{"version":3,"file":"handpose.js","sources":["../../src/handpose.js","../../src/handpose.js?comlink"],"sourcesContent":["// this runs as a web worker\nimport {transfer} from 'comlink';\nimport normalize from './normalize.js';\nimport { Matrix4, Quaternion } from 'three';\n\nconsole.log('Worker started');\n\nconst poses = new Map();\nconst tempMat1 = new Matrix4();\nconst tempMat2 = new Matrix4();\nconst tempQuat1 = new Quaternion();\nconst tempQuat2 = new Quaternion();\nclass HandPose {\n\t#matches\n\tconstructor () {\n\t\tthis.#matches = [];\n\t}\n\tstatic async loadPose(name, path) {\n\t\tconst url = new URL(path);\n\t\tconst buffer = await fetch(url).then(response => response.arrayBuffer());\n\t\tconst pose = new Float32Array(buffer);\n\t\tposes.set(name, pose);\n\t}\n\tstatic setPose(name, pose) {\n\t\tposes.set(name, pose);\n\t}\n\tstatic getPose(name) {\n\t\t// This is a copy not a transfer\n\t\treturn poses.get(name);\n\t}\n\tupdate (headPose, handPose, handedness) {\n\n\t\tnormalize(handPose);\n\n\t\tconst distances = [];\n\t\tfor (const [name, poseData] of poses) {\n\t\t\tconst isRight = Number(handedness === \"right\");\n\t\t\tconst poseHandDataSize = poseData[0];\n\t\t\tconst poseHandData = new Float32Array(poseData.buffer, (\n\t\t\t\t1 + // poseHandDataSize offset\n\t\t\t\t(poseHandDataSize * 16) * isRight // offset for right hand\n\t\t\t)*4 , poseHandDataSize * 16);\n\t\t\tconst poseWeightData = new Float32Array(poseData.buffer, (\n\t\t\t\t1 + // poseHandDataSize offset\n\t\t\t\t(poseHandDataSize * 16) * 2 + // offset for after hand data\n\t\t\t\t(poseHandDataSize * isRight)      // offset for right hand\n\t\t\t)*4 , poseHandDataSize);\n\n\t\t\tconst jointCount = Math.min(poseHandDataSize, handPose.length/16);\n\t\t\tlet dist = 0;\n\t\t\tlet totalWeight = 0.0001;\n\t\t\tfor (let i=0; i<jointCount; i++) {\n\t\t\t\tconst poseWeight = poseWeightData[i];\n\t\t\t\ttotalWeight += poseWeight;\n\t\t\t\tif (i === 0) continue;\n\n\t\t\t\t// Algo based on join rotation apply quaternion to a vector and\n\t\t\t\t// compare positions of vectors should work a bit better\n\t\t\t\tconst o = i*16;\n\t\t\t\ttempMat1.fromArray(poseHandData, o);\n\t\t\t\ttempMat2.fromArray(handPose, o);\n\t\t\t\ttempQuat1.setFromRotationMatrix(tempMat1);\n\t\t\t\ttempQuat2.setFromRotationMatrix(tempMat2);\n\t\t\t\tdist += tempQuat1.angleTo(tempQuat2) * poseWeight;\n\t\t\t}\n\t\t\tdist = dist / totalWeight;\n\t\t\tdistances.push([name, dist]);\n\t\t}\n\n\t\treturn transfer({\n\t\t\tusedHandArrayBuffer: handPose,\n\t\t\tdistances: distances.sort((a,b)=>a[1]-b[1])\n\t\t}, [handPose.buffer]);\n\t}\n\tgetMatchedPoses () {\n\t\treturn this.#matches;\n\t}\n}\n\nexport default HandPose;\n","\n\t\timport * as m from \"/Users/ada/gitWorkingDir/handy-work/src/handpose.js\";\n\t\timport {expose} from \"comlink\";\n\n\t\texpose(m);\n\t"],"names":["console","log","poses","Map","tempMat1","Matrix4","tempMat2","tempQuat1","Quaternion","tempQuat2","expose","matches","constructor","this","static","name","path","url","URL","buffer","fetch","then","response","arrayBuffer","pose","Float32Array","set","get","update","headPose","handPose","handedness","normalize","distances","poseData","isRight","Number","poseHandDataSize","poseHandData","poseWeightData","jointCount","Math","min","length","dist","totalWeight","i","poseWeight","o","fromArray","setFromRotationMatrix","angleTo","push","transfer","usedHandArrayBuffer","sort","a","b","getMatchedPoses"],"mappings":"4DAKAA,QAAQC,IAAI,kBAEZ,MAAMC,EAAQ,IAAIC,IACZC,EAAW,IAAIC,EACfC,EAAW,IAAID,EACfE,EAAY,IAAIC,EAChBC,EAAY,IAAID,ECPpBE,wCDQF,MACCC,GACAC,cACCC,MAAKF,EAAW,GAEjBG,sBAAsBC,EAAMC,GAC3B,MAAMC,EAAM,IAAIC,IAAIF,GACdG,QAAeC,MAAMH,GAAKI,MAAKC,GAAYA,EAASC,gBACpDC,EAAO,IAAIC,aAAaN,GAC9BjB,EAAMwB,IAAIX,EAAMS,GAEjBV,eAAeC,EAAMS,GACpBtB,EAAMwB,IAAIX,EAAMS,GAEjBV,eAAeC,GAEd,OAAOb,EAAMyB,IAAIZ,GAElBa,OAAQC,EAAUC,EAAUC,GAE3BC,EAAUF,GAEV,MAAMG,EAAY,GAClB,IAAK,MAAOlB,EAAMmB,KAAahC,EAAO,CACrC,MAAMiC,EAAUC,OAAsB,UAAfL,GACjBM,EAAmBH,EAAS,GAC5BI,EAAe,IAAIb,aAAaS,EAASf,OAG7C,GAFD,EACoB,GAAnBkB,EAAyBF,GACF,GAAnBE,GACAE,EAAiB,IAAId,aAAaS,EAASf,OAI/C,GAHD,EACoB,GAAnBkB,EAAyB,EACzBA,EAAmBF,GACfE,GAEAG,EAAaC,KAAKC,IAAIL,EAAkBP,EAASa,OAAO,IAC9D,IAAIC,EAAO,EACPC,EAAc,KAClB,IAAK,IAAIC,EAAE,EAAGA,EAAEN,EAAYM,IAAK,CAChC,MAAMC,EAAaR,EAAeO,GAElC,GADAD,GAAeE,EACL,IAAND,EAAS,SAIb,MAAME,EAAM,GAAFF,EACV1C,EAAS6C,UAAUX,EAAcU,GACjC1C,EAAS2C,UAAUnB,EAAUkB,GAC7BzC,EAAU2C,sBAAsB9C,GAChCK,EAAUyC,sBAAsB5C,GAChCsC,GAAQrC,EAAU4C,QAAQ1C,GAAasC,EAExCH,GAAcC,EACdZ,EAAUmB,KAAK,CAACrC,EAAM6B,IAGvB,OAAOS,EAAS,CACfC,oBAAqBxB,EACrBG,UAAWA,EAAUsB,MAAK,CAACC,EAAEC,IAAID,EAAE,GAAGC,EAAE,MACtC,CAAC3B,EAASX,SAEduC,kBACC,OAAO7C,MAAKF"}